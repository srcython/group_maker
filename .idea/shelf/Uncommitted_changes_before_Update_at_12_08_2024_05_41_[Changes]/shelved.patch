Index: app/src/main/java/com/yeceylan/groupmaker/ui/components/PlayerSelectionSection.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yeceylan.groupmaker.ui.components\r\n\r\nimport android.widget.Toast\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.border\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.*\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.layout.ContentScale\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport coil.compose.AsyncImage\r\nimport com.yeceylan.groupmaker.R\r\nimport com.yeceylan.groupmaker.domain.model.User\r\n\r\n@Composable\r\nfun PlayerSelectionSection(\r\n    teamName: String,\r\n    selectedUsers: List<User>,\r\n    availableUsers: List<User>,\r\n    maxPlayers: Int,\r\n    expanded: Boolean,\r\n    setExpanded: (Boolean) -> Unit,\r\n    setSelectedPersons: (List<User>) -> Unit\r\n) {\r\n    val context = LocalContext.current\r\n\r\n    Text(text = \"$teamName:\", fontSize = 18.sp, fontWeight = FontWeight.Bold)\r\n    Row(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(vertical = 4.dp),\r\n        horizontalArrangement = Arrangement.SpaceBetween,\r\n        verticalAlignment = Alignment.CenterVertically\r\n    ) {\r\n        Text(\r\n            text = \"Seçilen Kişiler (${selectedUsers.size}/$maxPlayers)\",\r\n            modifier = Modifier.padding(bottom = 5.dp)\r\n        )\r\n        Row {\r\n            IconButton(\r\n                onClick = {\r\n                    val randomPlayers =\r\n                        availableUsers.shuffled().take(maxPlayers - selectedUsers.size)\r\n                    setSelectedPersons(selectedUsers + randomPlayers)\r\n                }\r\n            ) {\r\n                Image(\r\n                    painter = painterResource(id = R.drawable.ic_random),\r\n                    contentDescription = \"İlk 11 Seç\",\r\n                    modifier = Modifier.size(20.dp)\r\n                )\r\n            }\r\n            IconButton(\r\n                onClick = {\r\n                    setSelectedPersons(emptyList())\r\n                }\r\n            ) {\r\n                Image(\r\n                    painter = painterResource(id = R.drawable.ic_bin),\r\n                    contentDescription = \"Seçimleri Kaldır\",\r\n                    modifier = Modifier.size(20.dp)\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .clip(RoundedCornerShape(16.dp))\r\n            .background(Color.White)\r\n            .border(2.dp, Color.Gray, RoundedCornerShape(16.dp))\r\n    ) {\r\n        Column {\r\n            Row(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .clickable { setExpanded(true) }\r\n                    .padding(16.dp),\r\n                verticalAlignment = Alignment.CenterVertically,\r\n                horizontalArrangement = Arrangement.SpaceBetween\r\n            ) {\r\n                Text(\r\n                    text = if (selectedUsers.isEmpty()) \"Kişi seç\" else \"Seçilen Kişiler: ${selectedUsers.joinToString { it.firstName }}\",\r\n                    fontSize = 16.sp,\r\n                    modifier = Modifier.weight(1f)\r\n                )\r\n                Icon(\r\n                    painter = painterResource(id = if (expanded) R.drawable.ic_arrow_drop_up else R.drawable.ic_arrow_drop_down),\r\n                    contentDescription = null,\r\n                    modifier = Modifier.size(24.dp)\r\n                )\r\n            }\r\n            DropdownMenu(\r\n                expanded = expanded,\r\n                onDismissRequest = { setExpanded(false) },\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n            ) {\r\n                if (availableUsers.isEmpty()) {\r\n                    DropdownMenuItem(onClick = { setExpanded(false) }) {\r\n                        Box(\r\n                            modifier = Modifier.fillMaxWidth(),\r\n                            contentAlignment = Alignment.Center\r\n                        ) {\r\n                            //Seçilecek kimse kalmadı\r\n                            Text(\"Seçilecek kimse yok\")\r\n                        }\r\n                    }\r\n                } else {\r\n                    Box(\r\n                        modifier = Modifier.fillMaxWidth(),\r\n                        contentAlignment = Alignment.Center\r\n                    ) {\r\n                        Row(\r\n                            verticalAlignment = Alignment.CenterVertically,\r\n                            horizontalArrangement = Arrangement.Center,\r\n                            modifier = Modifier.fillMaxWidth()\r\n                        ) {\r\n                            Text(\r\n                                text = teamName,\r\n                                fontSize = 16.sp,\r\n                                fontWeight = FontWeight.Bold,\r\n                                modifier = Modifier\r\n                                    .align(Alignment.CenterVertically)\r\n                                    .padding(start = 10.dp)\r\n                            )\r\n                            Spacer(modifier = Modifier.weight(1f))\r\n                            IconButton(\r\n                                onClick = {\r\n                                    setExpanded(false)\r\n                                }\r\n                            ) {\r\n                                Image(\r\n                                    painter = painterResource(id = R.drawable.ic_close),\r\n                                    contentDescription = \"Close\",\r\n                                    modifier = Modifier.size(15.dp)\r\n                                )\r\n                            }\r\n                        }\r\n                    }\r\n                    Column(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .background(Color.White)\r\n                            .heightIn(max = 300.dp)\r\n                            .verticalScroll(rememberScrollState())\r\n                    ) {\r\n                        availableUsers.sortedBy { it.firstName }.forEach { person ->\r\n                            DropdownMenuItem(\r\n                                onClick = {\r\n                                    if (selectedUsers.contains(person)) {\r\n                                        setSelectedPersons(selectedUsers - person)\r\n                                    } else if (selectedUsers.size < maxPlayers) {\r\n                                        setSelectedPersons(selectedUsers + person)\r\n                                    } else {\r\n                                        Toast.makeText(\r\n                                            context,\r\n                                            \"$teamName en fazla $maxPlayers kişi olabilir\",\r\n                                            Toast.LENGTH_SHORT\r\n                                        ).show()\r\n                                    }\r\n                                },\r\n                                modifier = Modifier.background(Color.White)\r\n                            ) {\r\n                                Row(\r\n                                    verticalAlignment = Alignment.CenterVertically,\r\n                                    modifier = Modifier\r\n                                        .fillMaxWidth()\r\n                                ) {\r\n                                    Checkbox(\r\n                                        checked = selectedUsers.contains(person),\r\n                                        onCheckedChange = null,\r\n                                        colors = CheckboxDefaults.colors(\r\n                                            checkedColor = Color.Green\r\n                                        )\r\n                                    )\r\n                                    Spacer(modifier = Modifier.width(8.dp))\r\n                                    AsyncImage(\r\n                                        model = person.photoUrl,\r\n                                        placeholder = painterResource(id = R.drawable.ic_clock),\r\n                                        error = painterResource(id = R.drawable.ic_clock),\r\n                                        contentDescription = null,\r\n                                        modifier = Modifier\r\n                                            .size(40.dp)\r\n                                            .clip(CircleShape),\r\n                                        contentScale = ContentScale.Crop,\r\n                                        alignment = Alignment.Center\r\n                                    )\r\n                                    Spacer(modifier = Modifier.width(8.dp))\r\n                                    Column(modifier = Modifier.weight(1f)) {\r\n                                        Text(text = \"${person.firstName} ${person.surname}\")\r\n                                        person.position?.let {\r\n                                            Text(\r\n                                                text = it,\r\n                                                style = MaterialTheme.typography.body2\r\n                                            )\r\n                                        }\r\n                                    }\r\n                                    Image(\r\n                                        painter = painterResource(id = R.drawable.ic_star),\r\n                                        contentDescription = null,\r\n                                        modifier = Modifier.size(16.dp)\r\n                                    )\r\n                                    Spacer(modifier = Modifier.width(4.dp))\r\n                                    Text(text = person.point.toString())\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/yeceylan/groupmaker/ui/components/PlayerSelectionSection.kt b/app/src/main/java/com/yeceylan/groupmaker/ui/components/PlayerSelectionSection.kt
--- a/app/src/main/java/com/yeceylan/groupmaker/ui/components/PlayerSelectionSection.kt	(revision dd83c786bb9715e15728f25b2a0af0c6dc6f6c44)
+++ b/app/src/main/java/com/yeceylan/groupmaker/ui/components/PlayerSelectionSection.kt	(date 1723427779944)
@@ -95,7 +95,7 @@
                 horizontalArrangement = Arrangement.SpaceBetween
             ) {
                 Text(
-                    text = if (selectedUsers.isEmpty()) "Kişi seç" else "Seçilen Kişiler: ${selectedUsers.joinToString { it.firstName }}",
+                    text = if (selectedUsers.isEmpty()) "Kişi seç" else "Seçilen Kişiler: ${selectedUsers.joinToString { it.firstName.ifBlank { it.userName } }}",
                     fontSize = 16.sp,
                     modifier = Modifier.weight(1f)
                 )
@@ -117,108 +117,67 @@
                             modifier = Modifier.fillMaxWidth(),
                             contentAlignment = Alignment.Center
                         ) {
-                            //Seçilecek kimse kalmadı
-                            Text("Seçilecek kimse yok")
+                            Text("Seçilecek kimse kalmadı")
                         }
                     }
                 } else {
-                    Box(
-                        modifier = Modifier.fillMaxWidth(),
-                        contentAlignment = Alignment.Center
-                    ) {
-                        Row(
-                            verticalAlignment = Alignment.CenterVertically,
-                            horizontalArrangement = Arrangement.Center,
-                            modifier = Modifier.fillMaxWidth()
-                        ) {
-                            Text(
-                                text = teamName,
-                                fontSize = 16.sp,
-                                fontWeight = FontWeight.Bold,
-                                modifier = Modifier
-                                    .align(Alignment.CenterVertically)
-                                    .padding(start = 10.dp)
-                            )
-                            Spacer(modifier = Modifier.weight(1f))
-                            IconButton(
-                                onClick = {
-                                    setExpanded(false)
-                                }
-                            ) {
-                                Image(
-                                    painter = painterResource(id = R.drawable.ic_close),
-                                    contentDescription = "Close",
-                                    modifier = Modifier.size(15.dp)
-                                )
-                            }
-                        }
-                    }
-                    Column(
-                        modifier = Modifier
-                            .fillMaxWidth()
-                            .background(Color.White)
-                            .heightIn(max = 300.dp)
-                            .verticalScroll(rememberScrollState())
-                    ) {
-                        availableUsers.sortedBy { it.firstName }.forEach { person ->
-                            DropdownMenuItem(
-                                onClick = {
-                                    if (selectedUsers.contains(person)) {
-                                        setSelectedPersons(selectedUsers - person)
-                                    } else if (selectedUsers.size < maxPlayers) {
-                                        setSelectedPersons(selectedUsers + person)
-                                    } else {
-                                        Toast.makeText(
-                                            context,
-                                            "$teamName en fazla $maxPlayers kişi olabilir",
-                                            Toast.LENGTH_SHORT
-                                        ).show()
-                                    }
-                                },
-                                modifier = Modifier.background(Color.White)
-                            ) {
-                                Row(
-                                    verticalAlignment = Alignment.CenterVertically,
-                                    modifier = Modifier
-                                        .fillMaxWidth()
-                                ) {
-                                    Checkbox(
-                                        checked = selectedUsers.contains(person),
-                                        onCheckedChange = null,
-                                        colors = CheckboxDefaults.colors(
-                                            checkedColor = Color.Green
-                                        )
-                                    )
-                                    Spacer(modifier = Modifier.width(8.dp))
-                                    AsyncImage(
-                                        model = person.photoUrl,
-                                        placeholder = painterResource(id = R.drawable.ic_clock),
-                                        error = painterResource(id = R.drawable.ic_clock),
-                                        contentDescription = null,
-                                        modifier = Modifier
-                                            .size(40.dp)
-                                            .clip(CircleShape),
-                                        contentScale = ContentScale.Crop,
-                                        alignment = Alignment.Center
-                                    )
-                                    Spacer(modifier = Modifier.width(8.dp))
-                                    Column(modifier = Modifier.weight(1f)) {
-                                        Text(text = "${person.firstName} ${person.surname}")
-                                        person.position?.let {
-                                            Text(
-                                                text = it,
-                                                style = MaterialTheme.typography.body2
-                                            )
-                                        }
-                                    }
-                                    Image(
-                                        painter = painterResource(id = R.drawable.ic_star),
-                                        contentDescription = null,
-                                        modifier = Modifier.size(16.dp)
-                                    )
-                                    Spacer(modifier = Modifier.width(4.dp))
-                                    Text(text = person.point.toString())
-                                }
+                    availableUsers.sortedBy { if (it.firstName.isNotBlank()) it.firstName else it.userName }.forEach { person ->
+                        DropdownMenuItem(
+                            onClick = {
+                                if (selectedUsers.contains(person)) {
+                                    setSelectedPersons(selectedUsers - person)
+                                } else if (selectedUsers.size < maxPlayers) {
+                                    setSelectedPersons(selectedUsers + person)
+                                } else {
+                                    Toast.makeText(
+                                        context,
+                                        "$teamName en fazla $maxPlayers kişi olabilir",
+                                        Toast.LENGTH_SHORT
+                                    ).show()
+                                }
+                            },
+                            modifier = Modifier.background(Color.White)
+                        ) {
+                            Row(
+                                verticalAlignment = Alignment.CenterVertically,
+                                modifier = Modifier
+                                    .fillMaxWidth()
+                            ) {
+                                Checkbox(
+                                    checked = selectedUsers.contains(person),
+                                    onCheckedChange = null,
+                                    colors = CheckboxDefaults.colors(
+                                        checkedColor = Color.Green
+                                    )
+                                )
+                                Spacer(modifier = Modifier.width(8.dp))
+                                AsyncImage(
+                                    model = person.photoUrl,
+                                    placeholder = painterResource(id = R.drawable.ic_clock),
+                                    error = painterResource(id = R.drawable.ic_clock),
+                                    contentDescription = null,
+                                    modifier = Modifier
+                                        .size(40.dp)
+                                        .clip(CircleShape),
+                                    contentScale = ContentScale.Crop,
+                                    alignment = Alignment.Center
+                                )
+                                Spacer(modifier = Modifier.width(8.dp))
+                                Column(modifier = Modifier.weight(1f)) {
+                                    val displayName = if (person.firstName.isNotBlank()) "${person.firstName} ${person.surname}" else person.userName
+                                    Text(text = displayName)
+                                    Text(
+                                        text = person.position,
+                                        style = MaterialTheme.typography.body2
+                                    )
+                                }
+                                Image(
+                                    painter = painterResource(id = R.drawable.ic_star),
+                                    contentDescription = null,
+                                    modifier = Modifier.size(16.dp)
+                                )
+                                Spacer(modifier = Modifier.width(4.dp))
+                                Text(text = person.point.toString())
                             }
                         }
                     }
Index: app/src/main/java/com/yeceylan/groupmaker/ui/match/MakeMatchScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yeceylan.groupmaker.ui.match\r\n\r\nimport android.widget.Toast\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.border\r\nimport androidx.compose.foundation.gestures.detectTapGestures\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.*\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.input.pointer.pointerInput\r\nimport androidx.compose.ui.platform.LocalFocusManager\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport androidx.navigation.NavController\r\nimport com.yeceylan.groupmaker.core.Resource\r\nimport com.yeceylan.groupmaker.domain.model.User\r\nimport com.yeceylan.groupmaker.ui.components.*\r\nimport com.yeceylan.groupmaker.ui.location.LocationViewModel\r\n\r\n@Composable\r\nfun MakeMatchScreen(\r\n    sportTitle:String,\r\n    teamSize: Int,\r\n    navController: NavController,\r\n    makeMatchViewModel: MakeMatchViewModel = hiltViewModel(),\r\n    locationViewModel: LocationViewModel = hiltViewModel(),\r\n) {\r\n    val focusManager = LocalFocusManager.current\r\n    val team1Name by makeMatchViewModel.team1Name.collectAsState()\r\n    val team2Name by makeMatchViewModel.team2Name.collectAsState()\r\n    val userList by makeMatchViewModel.users.collectAsState()\r\n    val activeMatch by makeMatchViewModel.activeMatch.collectAsState(initial = null)\r\n    var expanded1 by remember { mutableStateOf(false) }\r\n    var expanded2 by remember { mutableStateOf(false) }\r\n    val selectedPersons1 by makeMatchViewModel.selectedPersons1.collectAsState()\r\n    val selectedPersons2 by makeMatchViewModel.selectedPersons2.collectAsState()\r\n    var maxPlayers by remember { mutableIntStateOf(teamSize) }\r\n    val showPlayerCountDialog by makeMatchViewModel.showPlayerCountDialog.collectAsState()\r\n    val showChangeTeamNamesDialog by makeMatchViewModel.showChangeTeamNamesDialog.collectAsState()\r\n    val matchLocation by makeMatchViewModel.matchLocation.collectAsState()\r\n    val locationLatLng by locationViewModel.selectedLocation.collectAsState(initial = null)\r\n    val selectedAddress by locationViewModel.selectedAddress.collectAsState(initial = \"\")\r\n    val matchDate by makeMatchViewModel.matchDate.collectAsState()\r\n    val matchTime by makeMatchViewModel.matchTime.collectAsState()\r\n\r\n    if (showPlayerCountDialog) {\r\n        PlayerCountDialog(maxPlayers) {\r\n            maxPlayers = it; makeMatchViewModel.togglePlayerCountDialog(\r\n            false\r\n        )\r\n        }\r\n    }\r\n\r\n    if (showChangeTeamNamesDialog) {\r\n        ChangeTeamNamesDialog(\r\n            team1Name = team1Name,\r\n            team2Name = team2Name,\r\n            onTeamNamesChanged = { newTeam1Name, newTeam2Name ->\r\n                makeMatchViewModel.setTeam1Name(newTeam1Name)\r\n                makeMatchViewModel.setTeam2Name(newTeam2Name)\r\n                makeMatchViewModel.toggleChangeTeamNamesDialog(false)\r\n            }\r\n        )\r\n    }\r\n\r\n    Scaffold(\r\n        modifier = Modifier\r\n            .background(Color.White)\r\n            .fillMaxSize(),\r\n        content = { paddingValues ->\r\n            Column(\r\n                modifier = Modifier\r\n                    .fillMaxSize()\r\n                    .padding(paddingValues)\r\n                    .padding(16.dp)\r\n                    .pointerInput(Unit) {\r\n                        detectTapGestures(onTap = {\r\n                            focusManager.clearFocus()\r\n                        })\r\n                    }\r\n            ) {\r\n                Text(\r\n                    modifier = Modifier.padding(top = 30.dp),\r\n                    text = \"Maç Yeri Ve Zamanı\",\r\n                    color = Color.Black,\r\n                    fontWeight = FontWeight.Bold,\r\n                    fontSize = 20.sp\r\n                )\r\n                Spacer(modifier = Modifier.height(5.dp))\r\n\r\n                MatchLocationInputField(\r\n                    label = \"Maç konumu giriniz\",\r\n                    value = matchLocation,\r\n                    onValueChange = { makeMatchViewModel.setMatchLocation(it) },\r\n                    viewModel = locationViewModel\r\n                )\r\n\r\n                Spacer(modifier = Modifier.height(8.dp))\r\n                Row(\r\n                    modifier = Modifier.fillMaxWidth(),\r\n                    horizontalArrangement = Arrangement.SpaceBetween\r\n                ) {\r\n                    MatchDateInputField(\r\n                        label = \"Maç Tarihi: \",\r\n                        value = matchDate,\r\n                        onValueChange = { makeMatchViewModel.setMatchDate(it) },\r\n                        modifier = Modifier.weight(1f)\r\n                    )\r\n                    Spacer(modifier = Modifier.width(8.dp))\r\n                    MatchTimeInputField(\r\n                        label = \"Maç Saati: \",\r\n                        value = matchTime,\r\n                        onValueChange = { makeMatchViewModel.setMatchTime(it) },\r\n                        matchDate = matchDate, // Yeni eklenen parametreyi geçiyoruz\r\n                        modifier = Modifier.weight(1f)\r\n                    )\r\n                }\r\n                Spacer(modifier = Modifier.height(16.dp))\r\n\r\n                Column(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth(),\r\n                    horizontalAlignment = Alignment.CenterHorizontally\r\n                ) {\r\n                    Text(\r\n                        text = \"Takım Oluştur\",\r\n                        color = Color.Black,\r\n                        fontWeight = FontWeight.Bold,\r\n                        fontSize = 20.sp\r\n                    )\r\n                    Row(\r\n                        horizontalArrangement = Arrangement.Center,\r\n                        modifier = Modifier.fillMaxWidth()\r\n                    ) {\r\n                        Button(\r\n                            onClick = { makeMatchViewModel.togglePlayerCountDialog(true) },\r\n                            modifier = Modifier.padding(8.dp)\r\n                        ) {\r\n                            Text(text = \"Takımlar kaç kişilik?\", fontSize = 14.sp)\r\n                        }\r\n                        Spacer(modifier = Modifier.width(16.dp))\r\n                        Button(\r\n                            onClick = { makeMatchViewModel.toggleChangeTeamNamesDialog(true) },\r\n                            modifier = Modifier.padding(8.dp)\r\n                        ) {\r\n                            Text(text = \"Takım Adlarını Değiştir\", fontSize = 14.sp)\r\n                        }\r\n                    }\r\n                }\r\n\r\n                Spacer(modifier = Modifier.height(16.dp))\r\n\r\n                Box(\r\n                    modifier = Modifier\r\n                        .fillMaxSize()\r\n                        .background(Color.White)\r\n                        .border(1.dp, Color.Gray, RoundedCornerShape(8.dp))\r\n                ) {\r\n                    when (userList) {\r\n                        is Resource.Loading -> {\r\n                            CircularProgressIndicator(modifier = Modifier.align(Alignment.Center))\r\n                        }\r\n\r\n                        is Resource.Success -> {\r\n                            val users = userList.data ?: emptyList()\r\n                            if (users.isEmpty()) {\r\n                                Text(\r\n                                    text = \"Herhangi bir oyuncu eklemediniz...\",\r\n                                    modifier = Modifier.align(Alignment.Center)\r\n                                )\r\n                                return@Scaffold\r\n                            }\r\n\r\n                            LazyColumn(\r\n                                modifier = Modifier\r\n                                    .fillMaxSize()\r\n                                    .padding(\r\n                                        top = 10.dp,\r\n                                        start = 10.dp,\r\n                                        end = 10.dp,\r\n                                        bottom = 50.dp\r\n                                    )\r\n                            ) {\r\n                                item {\r\n                                    PlayerSelectionSection(\r\n                                        teamName = team1Name,\r\n                                        selectedUsers = selectedPersons1,\r\n                                        availableUsers = users.filter { it !in selectedPersons2 },\r\n                                        maxPlayers = maxPlayers,\r\n                                        expanded = expanded1,\r\n                                        setExpanded = { expanded1 = it },\r\n                                        setSelectedPersons = {\r\n                                            makeMatchViewModel.setSelectedPersons1(\r\n                                                it\r\n                                            )\r\n                                        }\r\n                                    )\r\n                                    SelectedPlayersGrid(selectedPersons1) {\r\n                                        makeMatchViewModel.setSelectedPersons1(\r\n                                            it\r\n                                        )\r\n                                    }\r\n                                    Spacer(modifier = Modifier.height(16.dp))\r\n                                    PlayerSelectionSection(\r\n                                        teamName = team2Name,\r\n                                        selectedUsers = selectedPersons2,\r\n                                        availableUsers = users.filter { it !in selectedPersons1 },\r\n                                        maxPlayers = maxPlayers,\r\n                                        expanded = expanded2,\r\n                                        setExpanded = { expanded2 = it },\r\n                                        setSelectedPersons = {\r\n                                            makeMatchViewModel.setSelectedPersons2(\r\n                                                it\r\n                                            )\r\n                                        }\r\n                                    )\r\n                                    SelectedPlayersGrid(selectedPersons2) {\r\n                                        makeMatchViewModel.setSelectedPersons2(\r\n                                            it\r\n                                        )\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        is Resource.Error -> {\r\n                            Text(\r\n                                text = \"Hata: ${userList.message}\",\r\n                                color = Color.Red,\r\n                                modifier = Modifier.align(Alignment.Center)\r\n                            )\r\n                        }\r\n                    }\r\n\r\n                    Button(\r\n                        onClick = {\r\n                            val context = navController.context\r\n\r\n                            if (matchLocation.isEmpty()) {\r\n                                Toast.makeText(\r\n                                    context,\r\n                                    \"Lütfen maç konumunu girin!\",\r\n                                    Toast.LENGTH_SHORT\r\n                                ).show()\r\n                            } else if (matchDate.isEmpty()) {\r\n                                Toast.makeText(\r\n                                    context,\r\n                                    \"Lütfen maç tarihini seçin!\",\r\n                                    Toast.LENGTH_SHORT\r\n                                ).show()\r\n                            } else if (matchTime.isEmpty()) {\r\n                                Toast.makeText(\r\n                                    context,\r\n                                    \"Lütfen maç saatini seçin!\",\r\n                                    Toast.LENGTH_SHORT\r\n                                ).show()\r\n                            } else if (selectedPersons1.isEmpty()) {\r\n                                Toast.makeText(\r\n                                    context,\r\n                                    \"Lütfen ilk takımın oyuncularını seçin!\",\r\n                                    Toast.LENGTH_SHORT\r\n                                ).show()\r\n                            } else if (selectedPersons2.isEmpty()) {\r\n                                Toast.makeText(\r\n                                    context,\r\n                                    \"Lütfen ikinci takımın oyuncularını seçin!\",\r\n                                    Toast.LENGTH_SHORT\r\n                                ).show()\r\n                            } else {\r\n                                selectedAddress?.let {\r\n                                    makeMatchViewModel.updateMatchAndNavigate(\r\n                                        navController, locationLatLng,\r\n                                        it\r\n                                    )\r\n                                }\r\n                            }\r\n                        },\r\n                        modifier = Modifier\r\n                            .align(Alignment.BottomCenter)\r\n                            .padding(5.dp)\r\n                    ) {\r\n                        Text(text = \"Maç Oluştur\")\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n    )\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/yeceylan/groupmaker/ui/match/MakeMatchScreen.kt b/app/src/main/java/com/yeceylan/groupmaker/ui/match/MakeMatchScreen.kt
--- a/app/src/main/java/com/yeceylan/groupmaker/ui/match/MakeMatchScreen.kt	(revision dd83c786bb9715e15728f25b2a0af0c6dc6f6c44)
+++ b/app/src/main/java/com/yeceylan/groupmaker/ui/match/MakeMatchScreen.kt	(date 1723427047625)
@@ -20,13 +20,12 @@
 import androidx.hilt.navigation.compose.hiltViewModel
 import androidx.navigation.NavController
 import com.yeceylan.groupmaker.core.Resource
-import com.yeceylan.groupmaker.domain.model.User
 import com.yeceylan.groupmaker.ui.components.*
 import com.yeceylan.groupmaker.ui.location.LocationViewModel
 
 @Composable
 fun MakeMatchScreen(
-    sportTitle:String,
+    matchType: String,
     teamSize: Int,
     navController: NavController,
     makeMatchViewModel: MakeMatchViewModel = hiltViewModel(),
@@ -36,7 +35,6 @@
     val team1Name by makeMatchViewModel.team1Name.collectAsState()
     val team2Name by makeMatchViewModel.team2Name.collectAsState()
     val userList by makeMatchViewModel.users.collectAsState()
-    val activeMatch by makeMatchViewModel.activeMatch.collectAsState(initial = null)
     var expanded1 by remember { mutableStateOf(false) }
     var expanded2 by remember { mutableStateOf(false) }
     val selectedPersons1 by makeMatchViewModel.selectedPersons1.collectAsState()
@@ -118,7 +116,7 @@
                         label = "Maç Saati: ",
                         value = matchTime,
                         onValueChange = { makeMatchViewModel.setMatchTime(it) },
-                        matchDate = matchDate, // Yeni eklenen parametreyi geçiyoruz
+                        matchDate = matchDate,
                         modifier = Modifier.weight(1f)
                     )
                 }
@@ -238,7 +236,6 @@
                             )
                         }
                     }
-
                     Button(
                         onClick = {
                             val context = navController.context
Index: app/src/main/java/com/yeceylan/groupmaker/domain/model/weather/Condition.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yeceylan.groupmaker.domain.model.weather\r\n\r\ndata class Condition(\r\n    val text: String\r\n\r\n)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/yeceylan/groupmaker/domain/model/weather/Condition.kt b/app/src/main/java/com/yeceylan/groupmaker/domain/model/weather/Condition.kt
--- a/app/src/main/java/com/yeceylan/groupmaker/domain/model/weather/Condition.kt	(revision dd83c786bb9715e15728f25b2a0af0c6dc6f6c44)
+++ b/app/src/main/java/com/yeceylan/groupmaker/domain/model/weather/Condition.kt	(date 1723414212242)
@@ -2,5 +2,4 @@
 
 data class Condition(
     val text: String
-
 )
\ No newline at end of file
Index: app/src/main/java/com/yeceylan/groupmaker/ui/match/matchinfo/MatchInfoScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yeceylan.groupmaker.ui.match.matchinfo\r\n\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.interaction.MutableInteractionSource\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.*\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Brush\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.painter.Painter\r\nimport androidx.compose.ui.layout.ContentScale\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport androidx.lifecycle.viewmodel.compose.viewModel\r\nimport androidx.navigation.NavController\r\nimport com.google.android.gms.maps.model.LatLng\r\nimport com.yeceylan.groupmaker.R\r\nimport com.yeceylan.groupmaker.core.Resource\r\nimport com.yeceylan.groupmaker.domain.model.Match\r\nimport com.yeceylan.groupmaker.domain.model.weather.Condition\r\nimport com.yeceylan.groupmaker.domain.model.weather.Forecast\r\nimport com.yeceylan.groupmaker.domain.model.weather.ForecastDay\r\nimport com.yeceylan.groupmaker.domain.model.weather.Hour\r\nimport com.yeceylan.groupmaker.domain.model.weather.WeatherResponse\r\nimport com.yeceylan.groupmaker.domain.model.weather.WeatherType\r\nimport com.yeceylan.groupmaker.ui.bottombar.BottomBarScreen\r\nimport com.yeceylan.groupmaker.ui.weather.WeatherViewModel\r\nimport java.text.SimpleDateFormat\r\nimport java.util.Calendar\r\nimport java.util.Locale\r\n\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.material.AlertDialog\r\nimport androidx.compose.material.TextButton\r\nimport androidx.compose.runtime.*\r\n\r\n@Composable\r\nfun MatchInfoScreen(\r\n    navController: NavController,\r\n    match: Match,\r\n    viewModel: WeatherViewModel = hiltViewModel(),\r\n    matchInfoViewModel: MatchInfoViewModel = hiltViewModel()\r\n) {\r\n    val weatherResource by viewModel.weatherInfo.collectAsState()\r\n    var showDialog by remember { mutableStateOf(false) }\r\n\r\n    LaunchedEffect(Unit) {\r\n        viewModel.fetchWeatherDataForMatch(match)\r\n    }\r\n\r\n    LazyColumn(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .padding(top = 50.dp, start = 16.dp, end = 16.dp)\r\n    ) {\r\n        item {\r\n            Button(\r\n                onClick = {\r\n                    showDialog = true\r\n                },\r\n                modifier = Modifier.fillMaxWidth()\r\n            ) {\r\n                Text(text = \"Maçı Bitir\", fontSize = 18.sp)\r\n            }\r\n\r\n            Spacer(modifier = Modifier.height(10.dp))\r\n            MatchInfoContent(match, matchInfoViewModel)\r\n            Spacer(modifier = Modifier.height(10.dp))\r\n            WeatherInfoContent(weatherResource, match)\r\n            Spacer(modifier = Modifier.height(10.dp))\r\n            TeamNamesWithBackground(\r\n                team1Name = match.firstTeamName ?: \"Takım 1\",\r\n                team2Name = match.secondTeamName ?: \"Takım 2\",\r\n                backgroundImage = R.drawable.img_stadium_background,\r\n                team1Players = match.firstTeamPlayerList.map { it.firstName },\r\n                team2Players = match.secondTeamPlayerList.map { it.firstName }\r\n            )\r\n            Spacer(modifier = Modifier.height(20.dp))\r\n            IbanRow(viewModel = matchInfoViewModel, iban = \"TR33 0006 1005 1978 6457 8413 26\")\r\n            Spacer(modifier = Modifier.height(20.dp))\r\n        }\r\n    }\r\n\r\n    if (showDialog) {\r\n        AlertDialog(\r\n            onDismissRequest = { showDialog = false },\r\n            title = { Text(text = \"Emin misiniz?\") },\r\n            text = { Text(text = \"Maçı bitirmek istediğinizden emin misiniz?\") },\r\n            confirmButton = {\r\n                TextButton(\r\n                    onClick = {\r\n                        matchInfoViewModel.finishMatch()\r\n                        navController.navigate(BottomBarScreen.Home.route)\r\n                        showDialog = false\r\n                    }\r\n                ) {\r\n                    Text(\"Evet\")\r\n                }\r\n            },\r\n            dismissButton = {\r\n                TextButton(\r\n                    onClick = { showDialog = false }\r\n                ) {\r\n                    Text(\"Hayır\")\r\n                }\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n@Composable\r\nfun MatchInfoContent(match: Match, viewModel: MatchInfoViewModel) {\r\n    val context = LocalContext.current\r\n    Card(\r\n        modifier = Modifier\r\n            .fillMaxWidth(),\r\n        elevation = 4.dp,\r\n        shape = RoundedCornerShape(8.dp),\r\n        backgroundColor = Color.Transparent,\r\n    ) {\r\n        Box(\r\n            modifier = Modifier\r\n                .background(\r\n                    brush = Brush.horizontalGradient(\r\n                        colors = listOf(Color(0xFF1E88E5), Color(0xFF42A5F5))\r\n                    )\r\n                )\r\n                .padding(16.dp)\r\n        ) {\r\n            Column {\r\n                Text(\r\n                    text = \"Maç Bilgileri\",\r\n                    fontSize = 20.sp,\r\n                    fontWeight = FontWeight.Bold,\r\n                    color = Color.White,\r\n                    modifier = Modifier.align(Alignment.CenterHorizontally)\r\n                )\r\n                Spacer(modifier = Modifier.height(8.dp))\r\n                MatchInfoRow(\r\n                    iconPainter = painterResource(id = R.drawable.ic_home),\r\n                    text = \"${match.matchLocationTitle}\"\r\n                )\r\n                Spacer(modifier = Modifier.height(4.dp))\r\n                MatchInfoRow(\r\n                    iconPainter = painterResource(id = R.drawable.ic_calendar),\r\n                    text = \"${match.matchDate}\"\r\n                )\r\n                Spacer(modifier = Modifier.height(4.dp))\r\n                MatchInfoRow(\r\n                    iconPainter = painterResource(id = R.drawable.ic_clock),\r\n                    text = \"${match.matchTime}\"\r\n                )\r\n                Spacer(modifier = Modifier.height(4.dp))\r\n                MatchInfoRow(\r\n                    iconPainter = painterResource(id = R.drawable.ic_maps),\r\n                    text = \"${match.matchLocation}\",\r\n                    modifier = Modifier.clickable {\r\n                        match.matchLocation?.let { viewModel.openMapForDirections(context, it) }\r\n                    }\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun MatchInfoRow(iconPainter: Painter, text: String, modifier: Modifier = Modifier) {\r\n    Row(verticalAlignment = Alignment.CenterVertically, modifier = modifier) {\r\n        Image(\r\n            painter = iconPainter,\r\n            contentDescription = null,\r\n            modifier = Modifier.size(25.dp)\r\n        )\r\n        Spacer(modifier = Modifier.width(8.dp))\r\n        Text(text = text, fontSize = 16.sp, color = Color.White)\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun MatchInfoRow(iconPainter: Painter, text: String) {\r\n    Row(verticalAlignment = Alignment.CenterVertically) {\r\n        Image(\r\n            painter = iconPainter,\r\n            contentDescription = null,\r\n            modifier = Modifier.size(25.dp)\r\n        )\r\n        Spacer(modifier = Modifier.width(8.dp))\r\n        Text(text = text, fontSize = 16.sp, color = Color.White)\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun WeatherInfoContent(weatherResource: Resource<WeatherResponse>?, match: Match) {\r\n    when (weatherResource) {\r\n        is Resource.Loading -> {\r\n            CircularProgressIndicator(\r\n                modifier = Modifier\r\n                    .size(48.dp)\r\n                    .padding(16.dp),\r\n                color = Color(0xFF388E3C)\r\n            )\r\n        }\r\n\r\n        is Resource.Success -> {\r\n            val weatherInfo = weatherResource.data\r\n            if (weatherInfo != null && weatherInfo.forecast.forecastday.isNotEmpty()) {\r\n                val forecastDay = weatherInfo.forecast.forecastday[0]\r\n\r\n                val inputDateFormat = SimpleDateFormat(\"dd-MM-yyyy\", Locale.getDefault())\r\n                val dateParsed = inputDateFormat.parse(match.matchDate)\r\n                val currentDate = Calendar.getInstance().time\r\n                val diff = dateParsed.time - currentDate.time\r\n                val diffDays = diff / (1000 * 60 * 60 * 24)\r\n\r\n                if (forecastDay.hour.isNotEmpty() && diffDays <= 14) {\r\n                    val currentHourWeather = forecastDay.hour[0]\r\n                    val conditionText = currentHourWeather.condition.text\r\n                    val weatherIconResId =\r\n                        WeatherType.weatherIconMap[conditionText] ?: R.drawable.ic_moon\r\n\r\n                    Card(\r\n                        modifier = Modifier.fillMaxWidth(),\r\n                        elevation = 4.dp,\r\n                        shape = RoundedCornerShape(8.dp),\r\n                    ) {\r\n                        Box(\r\n                            modifier = Modifier\r\n                                .fillMaxWidth()\r\n                                .background(\r\n                                    brush = Brush.horizontalGradient(\r\n                                        colors = listOf(Color(0xFF102840), Color(0xFF1B3B5A))\r\n                                    )\r\n                                )\r\n                                .padding(16.dp)\r\n                        ) {\r\n                            Column(\r\n                                verticalArrangement = Arrangement.Center,\r\n                                horizontalAlignment = Alignment.CenterHorizontally,\r\n                                modifier = Modifier.fillMaxWidth()\r\n                            ) {\r\n                                Text(\r\n                                    text = \"Maç Saati İçin Hava Durumu\",\r\n                                    fontSize = 20.sp,\r\n                                    fontWeight = FontWeight.Bold,\r\n                                    color = Color.White,\r\n                                    modifier = Modifier.align(Alignment.CenterHorizontally)\r\n                                )\r\n                                Spacer(modifier = Modifier.height(16.dp))\r\n                                Image(\r\n                                    painter = painterResource(id = weatherIconResId),\r\n                                    contentDescription = null,\r\n                                    contentScale = ContentScale.Fit,\r\n                                    modifier = Modifier\r\n                                        .size(100.dp)\r\n                                        .align(Alignment.CenterHorizontally)\r\n                                )\r\n                                Spacer(modifier = Modifier.height(8.dp))\r\n                                Text(\r\n                                    text = \"Durum: $conditionText\",\r\n                                    fontSize = 16.sp,\r\n                                    color = Color.White,\r\n                                    modifier = Modifier.align(Alignment.CenterHorizontally)\r\n                                )\r\n                                Text(\r\n                                    text = \"Sıcaklık: ${currentHourWeather.temp_c} °C\",\r\n                                    fontSize = 16.sp,\r\n                                    color = Color.White,\r\n                                    modifier = Modifier.align(Alignment.CenterHorizontally) // Metin rengi beyaz\r\n                                )\r\n                                Text(\r\n                                    text = \"Yağmur İhtimali: ${currentHourWeather.precip_mm} mm\",\r\n                                    fontSize = 16.sp,\r\n                                    color = Color.White,\r\n                                    modifier = Modifier.align(Alignment.CenterHorizontally) // Metin rengi beyaz\r\n                                )\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    Text(\r\n                        text = \"Hava durumu saati mevcut değil. Lütfen daha sonra tekrar deneyin.\",\r\n                        color = Color.Red,\r\n                        modifier = Modifier.padding(16.dp)\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n        is Resource.Error -> {\r\n            Text(\r\n                text = \"Hata: ${weatherResource.message}\",\r\n                color = Color.Red,\r\n                modifier = Modifier.padding(16.dp)\r\n            )\r\n        }\r\n\r\n        else -> {\r\n            Text(\r\n                text = \"Hava durumu bilgisi mevcut değil. Lütfen daha sonra tekrar deneyin.\",\r\n                color = Color.Red,\r\n                modifier = Modifier.padding(16.dp)\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun TeamNamesWithBackground(\r\n    team1Name: String,\r\n    team2Name: String,\r\n    team1Players: List<String>,\r\n    team2Players: List<String>,\r\n    backgroundImage: Int\r\n) {\r\n    Card(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .height(300.dp),\r\n        elevation = 4.dp,\r\n        shape = RoundedCornerShape(8.dp),\r\n        backgroundColor = Color.Transparent\r\n    ) {\r\n        Box(\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n        ) {\r\n            Image(\r\n                painter = painterResource(id = backgroundImage),\r\n                contentDescription = null,\r\n                contentScale = ContentScale.Crop,\r\n                modifier = Modifier.fillMaxSize()\r\n            )\r\n            Row(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .align(Alignment.Center)\r\n                    .padding(horizontal = 40.dp),\r\n                horizontalArrangement = Arrangement.SpaceBetween\r\n            ) {\r\n                Column(\r\n                    horizontalAlignment = Alignment.Start,\r\n                    modifier = Modifier.padding(end = 16.dp)\r\n                ) {\r\n                    Text(\r\n                        text = team1Name,\r\n                        fontSize = 24.sp,\r\n                        fontWeight = FontWeight.Bold,\r\n                        color = Color.White\r\n                    )\r\n                    team1Players.forEach { player ->\r\n                        Text(\r\n                            text = player,\r\n                            fontSize = 16.sp,\r\n                            color = Color.White\r\n                        )\r\n                    }\r\n                }\r\n\r\n                Image(\r\n                    painter = painterResource(id = R.drawable.ic_versus),\r\n                    contentDescription = null,\r\n                    contentScale = ContentScale.Fit,\r\n                    modifier = Modifier\r\n                        .align(Alignment.CenterVertically)\r\n                        .size(90.dp)\r\n                )\r\n\r\n                Column(\r\n                    horizontalAlignment = Alignment.End,\r\n                    modifier = Modifier.padding(start = 16.dp)\r\n                ) {\r\n                    Text(\r\n                        text = team2Name,\r\n                        fontSize = 24.sp,\r\n                        fontWeight = FontWeight.Bold,\r\n                        color = Color.White\r\n                    )\r\n                    team2Players.forEach { player ->\r\n                        Text(\r\n                            text = player,\r\n                            fontSize = 16.sp,\r\n                            color = Color.White\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun IbanRow(viewModel: MatchInfoViewModel, iban: String) {\r\n    val context = LocalContext.current\r\n    Row(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .clickable(\r\n                indication = null,\r\n                interactionSource = remember { MutableInteractionSource() }\r\n            ) {\r\n                viewModel.copyIbanToClipboard(context, iban)\r\n            },\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        horizontalArrangement = Arrangement.Center\r\n    ) {\r\n        Text(text = \"IBAN: \", fontSize = 16.sp, color = Color.Black, fontWeight = FontWeight.Bold)\r\n\r\n        Icon(\r\n            painter = painterResource(id = R.drawable.ic_copy),\r\n            contentDescription = null,\r\n            modifier = Modifier.size(24.dp)\r\n        )\r\n        Spacer(modifier = Modifier.width(2.dp))\r\n        Text(text = iban, fontSize = 16.sp, color = Color.Black)\r\n    }\r\n}\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nfun MatchInfoContentPreview() {\r\n    val match = Match(\r\n        id = \"1\",\r\n        matchLocationTitle = \"Stadyum\",\r\n        matchLocation = \"İstanbul, Türkiyedf vTürkiyedf vTürkiyedf TürkiyedfTürkiyedf\",\r\n        matchDate = \"01-01-2024\",\r\n        matchTime = \"18:00\",\r\n        firstTeamName = \"Takım A\",\r\n        secondTeamName = \"Takım B\",\r\n        type = \"Lig Maçı\",\r\n        latLng = LatLng(41.0082, 28.9784),\r\n        isActive = true,\r\n        maxPlayer = 22\r\n    )\r\n\r\n    //MatchInfoContent(match = match, viewModel = MatchInfoViewModel())\r\n}\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nfun WeatherInfoContentPreview() {\r\n    val match = Match(\r\n        id = \"1\",\r\n        matchLocationTitle = \"Stadyum\",\r\n        matchLocation = \"İstanbul, Türkiye\",\r\n        matchDate = \"01-01-2024\",\r\n        matchTime = \"18:00\",\r\n        firstTeamName = \"Takım A\",\r\n        secondTeamName = \"Takım B\",\r\n        type = \"Lig Maçı\",\r\n        latLng = LatLng(41.0082, 28.9784),\r\n        isActive = true,\r\n        maxPlayer = 22\r\n    )\r\n\r\n    val fakeWeatherResponse = WeatherResponse(\r\n        forecast = Forecast(\r\n            forecastday = listOf(\r\n                ForecastDay(\r\n                    date = \"2024-01-01\",\r\n                    hour = listOf(\r\n                        Hour(\r\n                            time = \"2024-01-01 18:00\",\r\n                            temp_c = 15.0,\r\n                            condition = Condition(\r\n                                text = \"Sunny\"\r\n                            ),\r\n                            precip_mm = 0.0\r\n                        )\r\n                    )\r\n                )\r\n            )\r\n        )\r\n    )\r\n    val weatherResource = Resource.Success(fakeWeatherResponse)\r\n\r\n    WeatherInfoContent(weatherResource = weatherResource, match = match)\r\n}\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nfun TeamNamesWithBackgroundPreview() {\r\n    TeamNamesWithBackground(\r\n        team1Name = \"Takım 1\",\r\n        team2Name = \"Takım 2\",\r\n        backgroundImage = R.drawable.img_stadium_background,\r\n        team1Players = listOf(\r\n            \"Oyuncu 1\",\r\n            \"Oyuncu 2\",\r\n            \"Oyuncu 1\",\r\n            \"Oyuncu 2\",\r\n            \"Oyuncu 1\",\r\n            \"Oyuncu 2\",\r\n            \"Oyuncu 1\",\r\n            \"Oyuncu 2\",\r\n            \"Oyuncu 1\",\r\n            \"Oyuncu 2\",\r\n            \"Oyuncu 1\"\r\n        ),\r\n        team2Players = listOf(\"Oyuncu 3\", \"Oyuncu 4\")\r\n    )\r\n}\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nfun IbanRowPreview() {\r\n    val viewModel: MatchInfoViewModel = viewModel()\r\n    IbanRow(viewModel = viewModel, iban = \"TR00 0000 0000 0000 0000 0000\")\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/yeceylan/groupmaker/ui/match/matchinfo/MatchInfoScreen.kt b/app/src/main/java/com/yeceylan/groupmaker/ui/match/matchinfo/MatchInfoScreen.kt
--- a/app/src/main/java/com/yeceylan/groupmaker/ui/match/matchinfo/MatchInfoScreen.kt	(revision dd83c786bb9715e15728f25b2a0af0c6dc6f6c44)
+++ b/app/src/main/java/com/yeceylan/groupmaker/ui/match/matchinfo/MatchInfoScreen.kt	(date 1723430503680)
@@ -42,7 +42,6 @@
 import java.text.SimpleDateFormat
 import java.util.Calendar
 import java.util.Locale
-
 import androidx.compose.foundation.lazy.LazyColumn
 import androidx.compose.material.AlertDialog
 import androidx.compose.material.TextButton
@@ -52,14 +51,14 @@
 fun MatchInfoScreen(
     navController: NavController,
     match: Match,
-    viewModel: WeatherViewModel = hiltViewModel(),
+    weatherViewModel: WeatherViewModel = hiltViewModel(),
     matchInfoViewModel: MatchInfoViewModel = hiltViewModel()
 ) {
-    val weatherResource by viewModel.weatherInfo.collectAsState()
+    val weatherResource by weatherViewModel.weatherInfo.collectAsState()
     var showDialog by remember { mutableStateOf(false) }
 
     LaunchedEffect(Unit) {
-        viewModel.fetchWeatherDataForMatch(match)
+        weatherViewModel.fetchWeatherDataForMatch(match)
     }
 
     LazyColumn(
@@ -76,21 +75,27 @@
             ) {
                 Text(text = "Maçı Bitir", fontSize = 18.sp)
             }
-
             Spacer(modifier = Modifier.height(10.dp))
+
             MatchInfoContent(match, matchInfoViewModel)
+
             Spacer(modifier = Modifier.height(10.dp))
+
             WeatherInfoContent(weatherResource, match)
+
             Spacer(modifier = Modifier.height(10.dp))
+
             TeamNamesWithBackground(
                 team1Name = match.firstTeamName ?: "Takım 1",
                 team2Name = match.secondTeamName ?: "Takım 2",
                 backgroundImage = R.drawable.img_stadium_background,
-                team1Players = match.firstTeamPlayerList.map { it.firstName },
-                team2Players = match.secondTeamPlayerList.map { it.firstName }
+                team1Players = match.firstTeamPlayerList.map { it.firstName.ifEmpty { it.userName } },
+                team2Players = match.secondTeamPlayerList.map { it.firstName.ifEmpty { it.userName } }
             )
             Spacer(modifier = Modifier.height(20.dp))
+
             IbanRow(viewModel = matchInfoViewModel, iban = "TR33 0006 1005 1978 6457 8413 26")
+
             Spacer(modifier = Modifier.height(20.dp))
         }
     }
@@ -122,9 +127,6 @@
     }
 }
 
-
-
-
 @Composable
 fun MatchInfoContent(match: Match, viewModel: MatchInfoViewModel) {
     val context = LocalContext.current
@@ -168,7 +170,7 @@
                     text = "${match.matchTime}"
                 )
                 Spacer(modifier = Modifier.height(4.dp))
-                MatchInfoRow(
+                MatchInfoRowWithModifier(
                     iconPainter = painterResource(id = R.drawable.ic_maps),
                     text = "${match.matchLocation}",
                     modifier = Modifier.clickable {
@@ -181,7 +183,7 @@
 }
 
 @Composable
-fun MatchInfoRow(iconPainter: Painter, text: String, modifier: Modifier = Modifier) {
+fun MatchInfoRowWithModifier(modifier: Modifier, iconPainter: Painter, text: String) {
     Row(verticalAlignment = Alignment.CenterVertically, modifier = modifier) {
         Image(
             painter = iconPainter,
@@ -193,7 +195,6 @@
     }
 }
 
-
 @Composable
 fun MatchInfoRow(iconPainter: Painter, text: String) {
     Row(verticalAlignment = Alignment.CenterVertically) {
@@ -207,7 +208,6 @@
     }
 }
 
-
 @Composable
 fun WeatherInfoContent(weatherResource: Resource<WeatherResponse>?, match: Match) {
     when (weatherResource) {
@@ -284,13 +284,13 @@
                                     text = "Sıcaklık: ${currentHourWeather.temp_c} °C",
                                     fontSize = 16.sp,
                                     color = Color.White,
-                                    modifier = Modifier.align(Alignment.CenterHorizontally) // Metin rengi beyaz
+                                    modifier = Modifier.align(Alignment.CenterHorizontally)
                                 )
                                 Text(
                                     text = "Yağmur İhtimali: ${currentHourWeather.precip_mm} mm",
                                     fontSize = 16.sp,
                                     color = Color.White,
-                                    modifier = Modifier.align(Alignment.CenterHorizontally) // Metin rengi beyaz
+                                    modifier = Modifier.align(Alignment.CenterHorizontally)
                                 )
                             }
                         }
@@ -323,7 +323,6 @@
     }
 }
 
-
 @Composable
 fun TeamNamesWithBackground(
     team1Name: String,
@@ -354,7 +353,7 @@
                 modifier = Modifier
                     .fillMaxWidth()
                     .align(Alignment.Center)
-                    .padding(horizontal = 40.dp),
+                    .padding(horizontal = 30.dp),
                 horizontalArrangement = Arrangement.SpaceBetween
             ) {
                 Column(
@@ -441,7 +440,7 @@
     val match = Match(
         id = "1",
         matchLocationTitle = "Stadyum",
-        matchLocation = "İstanbul, Türkiyedf vTürkiyedf vTürkiyedf TürkiyedfTürkiyedf",
+        matchLocation = "İstanbul, Ülker Fenerbahçe Şükrü Saracoğlu Stadyumu",
         matchDate = "01-01-2024",
         matchTime = "18:00",
         firstTeamName = "Takım A",
@@ -451,8 +450,6 @@
         isActive = true,
         maxPlayer = 22
     )
-
-    //MatchInfoContent(match = match, viewModel = MatchInfoViewModel())
 }
 
 @Preview(showBackground = true)
@@ -482,7 +479,7 @@
                             time = "2024-01-01 18:00",
                             temp_c = 15.0,
                             condition = Condition(
-                                text = "Sunny"
+                                text = "Açık"
                             ),
                             precip_mm = 0.0
                         )
@@ -506,17 +503,10 @@
         team1Players = listOf(
             "Oyuncu 1",
             "Oyuncu 2",
-            "Oyuncu 1",
-            "Oyuncu 2",
-            "Oyuncu 1",
-            "Oyuncu 2",
-            "Oyuncu 1",
-            "Oyuncu 2",
-            "Oyuncu 1",
-            "Oyuncu 2",
-            "Oyuncu 1"
         ),
-        team2Players = listOf("Oyuncu 3", "Oyuncu 4")
+        team2Players = listOf(
+            "Oyuncu 3", "Oyuncu 4"
+        )
     )
 }
 
Index: app/src/main/java/com/yeceylan/groupmaker/ui/components/MatchLocationInputField.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yeceylan.groupmaker.ui.components\r\n\r\nimport android.util.Log\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.border\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.*\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalFocusManager\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport com.google.android.libraries.places.api.model.AutocompletePrediction\r\nimport com.yeceylan.groupmaker.R\r\nimport com.yeceylan.groupmaker.ui.location.LocationViewModel\r\n\r\n@Composable\r\nfun MatchLocationInputField(\r\n    label: String,\r\n    value: String,\r\n    onValueChange: (String) -> Unit,\r\n    viewModel: LocationViewModel = hiltViewModel()\r\n) {\r\n    var searchQuery by remember { mutableStateOf(value) }\r\n    val predictions by viewModel.predictions.collectAsState()\r\n    var isDropdownOpen by remember { mutableStateOf(false) }\r\n    val focusManager = LocalFocusManager.current\r\n\r\n    // Update search results based on the query\r\n    LaunchedEffect(searchQuery) {\r\n        if (searchQuery.isNotEmpty()) {\r\n            viewModel.searchLocations(searchQuery)\r\n        }\r\n    }\r\n\r\n//    val selectedLocation by viewModel.selectedLocation.collectAsState()\r\n\r\n    Column {\r\n        OutlinedTextField(\r\n            value = searchQuery,\r\n            onValueChange = {\r\n                searchQuery = it\r\n                onValueChange(it)\r\n                isDropdownOpen = it.isNotEmpty()\r\n            },\r\n            label = { Text(label) },\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(vertical = 4.dp),\r\n            singleLine = true,\r\n            trailingIcon = {\r\n                if (searchQuery.isNotEmpty()) {\r\n                    IconButton(onClick = {\r\n                        searchQuery = \"\"\r\n                        onValueChange(\"\")\r\n                        isDropdownOpen = false\r\n                    }) {\r\n                        Image(\r\n                            painter = painterResource(id = R.drawable.ic_close),\r\n                            contentDescription = \"Clear\",\r\n                            modifier = Modifier.size(20.dp)\r\n                        )\r\n                    }\r\n                } else {\r\n                    Image(\r\n                        painter = painterResource(id = R.drawable.ic_location),\r\n                        contentDescription = \"Search\",\r\n                        modifier = Modifier.size(20.dp)\r\n                    )\r\n                }\r\n            }\r\n        )\r\n\r\n        if (isDropdownOpen && predictions.isNotEmpty()) {\r\n            LazyColumn(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .background(Color.White)\r\n                    .border(1.dp, Color.Gray, RoundedCornerShape(8.dp))\r\n            ) {\r\n                items(predictions) { prediction ->\r\n                    PredictionItem(prediction) { selectedLocationName ->\r\n                        // Fetch details for the selected place\r\n                        viewModel.fetchLocationDetails(prediction.placeId)\r\n                        searchQuery = selectedLocationName\r\n                        onValueChange(selectedLocationName)\r\n                        isDropdownOpen = false\r\n                        focusManager.clearFocus()\r\n                        Log.d(\"MatchLocationInputField\", \"Selected location: $selectedLocationName\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n//        selectedLocation?.let { location ->\r\n//            val formattedLatitude = String.format(\"%.4f\", location.latitude)\r\n//            val formattedLongitude = String.format(\"%.4f\", location.longitude)\r\n//\r\n//            Text(\r\n//                text = \"Latitude: $formattedLatitude, Longitude: $formattedLongitude\",\r\n//                style = MaterialTheme.typography.subtitle1,\r\n//                modifier = Modifier.padding(top = 8.dp)\r\n//            )\r\n//        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun PredictionItem(prediction: AutocompletePrediction, onClick: (String) -> Unit) {\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .clickable {\r\n                onClick(\r\n                    prediction\r\n                        .getPrimaryText(null)\r\n                        .toString()\r\n                )\r\n            }\r\n            .padding(8.dp)\r\n    ) {\r\n        Text(\r\n            text = prediction.getPrimaryText(null).toString(),\r\n            style = MaterialTheme.typography.subtitle1\r\n        )\r\n        Text(\r\n            text = prediction.getSecondaryText(null).toString(),\r\n            style = MaterialTheme.typography.body2,\r\n            color = Color.Gray\r\n        )\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/yeceylan/groupmaker/ui/components/MatchLocationInputField.kt b/app/src/main/java/com/yeceylan/groupmaker/ui/components/MatchLocationInputField.kt
--- a/app/src/main/java/com/yeceylan/groupmaker/ui/components/MatchLocationInputField.kt	(revision dd83c786bb9715e15728f25b2a0af0c6dc6f6c44)
+++ b/app/src/main/java/com/yeceylan/groupmaker/ui/components/MatchLocationInputField.kt	(date 1723422438852)
@@ -36,15 +36,12 @@
     var isDropdownOpen by remember { mutableStateOf(false) }
     val focusManager = LocalFocusManager.current
 
-    // Update search results based on the query
     LaunchedEffect(searchQuery) {
         if (searchQuery.isNotEmpty()) {
             viewModel.searchLocations(searchQuery)
         }
     }
 
-//    val selectedLocation by viewModel.selectedLocation.collectAsState()
-
     Column {
         OutlinedTextField(
             value = searchQuery,
@@ -90,7 +87,6 @@
             ) {
                 items(predictions) { prediction ->
                     PredictionItem(prediction) { selectedLocationName ->
-                        // Fetch details for the selected place
                         viewModel.fetchLocationDetails(prediction.placeId)
                         searchQuery = selectedLocationName
                         onValueChange(selectedLocationName)
@@ -101,17 +97,6 @@
                 }
             }
         }
-
-//        selectedLocation?.let { location ->
-//            val formattedLatitude = String.format("%.4f", location.latitude)
-//            val formattedLongitude = String.format("%.4f", location.longitude)
-//
-//            Text(
-//                text = "Latitude: $formattedLatitude, Longitude: $formattedLongitude",
-//                style = MaterialTheme.typography.subtitle1,
-//                modifier = Modifier.padding(top = 8.dp)
-//            )
-//        }
     }
 }
 
Index: app/src/main/java/com/yeceylan/groupmaker/ui/components/MatchDateAndTimeInputField.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yeceylan.groupmaker.ui.components\r\n\r\nimport android.app.DatePickerDialog\r\nimport android.app.TimePickerDialog\r\nimport android.util.Log\r\nimport android.widget.Toast\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.border\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.*\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport com.yeceylan.groupmaker.R\r\nimport java.util.Calendar\r\n\r\n@Composable\r\nfun MatchDateInputField(\r\n    label: String,\r\n    value: String,\r\n    onValueChange: (String) -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val context = LocalContext.current\r\n    val calendar = Calendar.getInstance()\r\n\r\n    val datePickerDialog = DatePickerDialog(\r\n        context,\r\n        { _, year, month, dayOfMonth ->\r\n            val formattedDate = String.format(\"%02d-%02d-%d\", dayOfMonth, month + 1, year)\r\n            onValueChange(formattedDate)\r\n        },\r\n        calendar.get(Calendar.YEAR),\r\n        calendar.get(Calendar.MONTH),\r\n        calendar.get(Calendar.DAY_OF_MONTH)\r\n    )\r\n\r\n    datePickerDialog.datePicker.minDate = calendar.timeInMillis\r\n\r\n    Box(\r\n        modifier = modifier\r\n            .padding(vertical = 4.dp)\r\n            .clickable { datePickerDialog.show() }\r\n            .background(Color.LightGray, RoundedCornerShape(8.dp))\r\n            .border(1.dp, Color.Gray, RoundedCornerShape(8.dp))\r\n            .padding(8.dp)\r\n    ) {\r\n        Row(verticalAlignment = Alignment.CenterVertically) {\r\n            Image(\r\n                painter = painterResource(id = R.drawable.ic_calendar),\r\n                contentDescription = null,\r\n                Modifier.size(20.dp)\r\n            )\r\n            Spacer(modifier = Modifier.width(8.dp))\r\n            Text(\r\n                text = if (value.isEmpty()) label else value,\r\n                color = if (value.isEmpty()) Color.Gray else Color.Black\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun MatchTimeInputField(\r\n    label: String,\r\n    value: String,\r\n    onValueChange: (String) -> Unit,\r\n    matchDate: String,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val context = LocalContext.current\r\n    val calendar = Calendar.getInstance()\r\n\r\n    if (matchDate.isNotEmpty()) {\r\n        val dateParts = matchDate.split(\"-\")\r\n        if (dateParts.size == 3) {\r\n            calendar.set(Calendar.YEAR, dateParts[2].toInt())\r\n            calendar.set(Calendar.MONTH, dateParts[1].toInt() - 1)\r\n            calendar.set(Calendar.DAY_OF_MONTH, dateParts[0].toInt())\r\n        }\r\n    }\r\n\r\n    val timePickerDialog = TimePickerDialog(\r\n        context,\r\n        { _, hour: Int, minute: Int ->\r\n            val selectedCalendar = Calendar.getInstance().apply {\r\n                set(Calendar.YEAR, calendar.get(Calendar.YEAR))\r\n                set(Calendar.MONTH, calendar.get(Calendar.MONTH))\r\n                set(Calendar.DAY_OF_MONTH, calendar.get(Calendar.DAY_OF_MONTH))\r\n                set(Calendar.HOUR_OF_DAY, hour)\r\n                set(Calendar.MINUTE, minute)\r\n            }\r\n\r\n            if (selectedCalendar.timeInMillis < System.currentTimeMillis()) {\r\n                Toast.makeText(context, \"Geçmiş bir saat seçtiniz, lütfen geçerli bir saat seçin!\", Toast.LENGTH_SHORT).show()\r\n            } else {\r\n                val formattedTime = String.format(\"%02d:%02d\", hour, minute)\r\n                onValueChange(formattedTime)\r\n            }\r\n        },\r\n        calendar.get(Calendar.HOUR_OF_DAY),\r\n        calendar.get(Calendar.MINUTE),\r\n        true\r\n    )\r\n\r\n    Box(\r\n        modifier = modifier\r\n            .padding(vertical = 4.dp)\r\n            .clickable { timePickerDialog.show() }\r\n            .background(Color.LightGray, RoundedCornerShape(8.dp))\r\n            .border(1.dp, Color.Gray, RoundedCornerShape(8.dp))\r\n            .padding(8.dp)\r\n    ) {\r\n        Row(verticalAlignment = Alignment.CenterVertically) {\r\n            Image(\r\n                painter = painterResource(id = R.drawable.ic_clock),\r\n                contentDescription = null,\r\n                Modifier.size(20.dp)\r\n            )\r\n            Spacer(modifier = Modifier.width(8.dp))\r\n            Text(\r\n                text = value.ifEmpty { label },\r\n                color = if (value.isEmpty()) Color.Gray else Color.Black\r\n            )\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/yeceylan/groupmaker/ui/components/MatchDateAndTimeInputField.kt b/app/src/main/java/com/yeceylan/groupmaker/ui/components/MatchDateAndTimeInputField.kt
--- a/app/src/main/java/com/yeceylan/groupmaker/ui/components/MatchDateAndTimeInputField.kt	(revision dd83c786bb9715e15728f25b2a0af0c6dc6f6c44)
+++ b/app/src/main/java/com/yeceylan/groupmaker/ui/components/MatchDateAndTimeInputField.kt	(date 1723421560945)
@@ -25,6 +25,8 @@
 import androidx.compose.ui.platform.LocalContext
 import com.yeceylan.groupmaker.R
 import java.util.Calendar
+import java.util.Locale
+import java.util.TimeZone
 
 @Composable
 fun MatchDateInputField(
@@ -34,19 +36,21 @@
     modifier: Modifier = Modifier
 ) {
     val context = LocalContext.current
-    val calendar = Calendar.getInstance()
+    val calendar = Calendar.getInstance().apply {
+        timeZone = TimeZone.getTimeZone("Europe/Istanbul")
+    }
 
     val datePickerDialog = DatePickerDialog(
         context,
         { _, year, month, dayOfMonth ->
-            val formattedDate = String.format("%02d-%02d-%d", dayOfMonth, month + 1, year)
+            val formattedDate =
+                String.format(Locale.getDefault(), "%02d-%02d-%d", dayOfMonth, month + 1, year)
             onValueChange(formattedDate)
         },
         calendar.get(Calendar.YEAR),
         calendar.get(Calendar.MONTH),
         calendar.get(Calendar.DAY_OF_MONTH)
     )
-
     datePickerDialog.datePicker.minDate = calendar.timeInMillis
 
     Box(
@@ -65,7 +69,7 @@
             )
             Spacer(modifier = Modifier.width(8.dp))
             Text(
-                text = if (value.isEmpty()) label else value,
+                text = value.ifEmpty { label },
                 color = if (value.isEmpty()) Color.Gray else Color.Black
             )
         }
@@ -81,7 +85,9 @@
     modifier: Modifier = Modifier
 ) {
     val context = LocalContext.current
-    val calendar = Calendar.getInstance()
+    val calendar = Calendar.getInstance().apply {
+        timeZone = TimeZone.getTimeZone("Europe/Istanbul")
+    }
 
     if (matchDate.isNotEmpty()) {
         val dateParts = matchDate.split("-")
@@ -95,16 +101,21 @@
     val timePickerDialog = TimePickerDialog(
         context,
         { _, hour: Int, minute: Int ->
-            val selectedCalendar = Calendar.getInstance().apply {
-                set(Calendar.YEAR, calendar.get(Calendar.YEAR))
-                set(Calendar.MONTH, calendar.get(Calendar.MONTH))
-                set(Calendar.DAY_OF_MONTH, calendar.get(Calendar.DAY_OF_MONTH))
-                set(Calendar.HOUR_OF_DAY, hour)
-                set(Calendar.MINUTE, minute)
-            }
+            val selectedCalendar =
+                Calendar.getInstance(TimeZone.getTimeZone("Europe/Istanbul")).apply {
+                    set(Calendar.YEAR, calendar.get(Calendar.YEAR))
+                    set(Calendar.MONTH, calendar.get(Calendar.MONTH))
+                    set(Calendar.DAY_OF_MONTH, calendar.get(Calendar.DAY_OF_MONTH))
+                    set(Calendar.HOUR_OF_DAY, hour)
+                    set(Calendar.MINUTE, minute)
+                }
 
             if (selectedCalendar.timeInMillis < System.currentTimeMillis()) {
-                Toast.makeText(context, "Geçmiş bir saat seçtiniz, lütfen geçerli bir saat seçin!", Toast.LENGTH_SHORT).show()
+                Toast.makeText(
+                    context,
+                    "Geçmiş bir saat seçtiniz, lütfen geçerli bir saat seçin!",
+                    Toast.LENGTH_SHORT
+                ).show()
             } else {
                 val formattedTime = String.format("%02d:%02d", hour, minute)
                 onValueChange(formattedTime)
@@ -136,4 +147,4 @@
             )
         }
     }
-}
+}
\ No newline at end of file
Index: app/src/main/java/com/yeceylan/groupmaker/data/repository/WeatherRepositoryImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yeceylan.groupmaker.data.repository\r\n\r\nimport android.util.Log\r\nimport com.yeceylan.groupmaker.domain.model.WeatherApiService\r\nimport com.yeceylan.groupmaker.core.Resource\r\nimport com.yeceylan.groupmaker.domain.model.weather.WeatherResponse\r\nimport com.yeceylan.groupmaker.domain.repository.WeatherRepository\r\nimport kotlinx.coroutines.flow.Flow\r\nimport kotlinx.coroutines.flow.flow\r\nimport javax.inject.Inject\r\n\r\nclass WeatherRepositoryImpl @Inject constructor(\r\n    private val apiService: WeatherApiService\r\n) : WeatherRepository {\r\n    override fun getWeatherForecast(\r\n        latLng: String,\r\n        date: String,\r\n        hour: String,\r\n        language: String\r\n    ): Flow<Resource<WeatherResponse>> = flow {\r\n        emit(Resource.Loading())\r\n\r\n        // API'ye gönderilen veriler\r\n        Log.d(\"WeatherRepository\", \"API Request - LatLng: $latLng, Date: $date, Hour: $hour, Language: $language\")\r\n\r\n        try {\r\n            val response = apiService.getWeatherForecast(\r\n                apiKey = \"88ccbf311c5e4e32bb0135032240408\",\r\n                latLng = latLng,\r\n                date = date,\r\n                hour = hour,\r\n                language = language\r\n            )\r\n            emit(Resource.Success(response))\r\n\r\n            Log.d(\"WeatherRepository\", \"API Response Success: $response\")\r\n        } catch (e: Exception) {\r\n            emit(Resource.Error(e.message ?: \"Bilinmeyen bir hata oluştu\"))\r\n\r\n            Log.e(\"WeatherRepository\", \"API Response Error: ${e.message}\")\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/yeceylan/groupmaker/data/repository/WeatherRepositoryImpl.kt b/app/src/main/java/com/yeceylan/groupmaker/data/repository/WeatherRepositoryImpl.kt
--- a/app/src/main/java/com/yeceylan/groupmaker/data/repository/WeatherRepositoryImpl.kt	(revision dd83c786bb9715e15728f25b2a0af0c6dc6f6c44)
+++ b/app/src/main/java/com/yeceylan/groupmaker/data/repository/WeatherRepositoryImpl.kt	(date 1723419586425)
@@ -20,9 +20,6 @@
     ): Flow<Resource<WeatherResponse>> = flow {
         emit(Resource.Loading())
 
-        // API'ye gönderilen veriler
-        Log.d("WeatherRepository", "API Request - LatLng: $latLng, Date: $date, Hour: $hour, Language: $language")
-
         try {
             val response = apiService.getWeatherForecast(
                 apiKey = "88ccbf311c5e4e32bb0135032240408",
@@ -33,11 +30,8 @@
             )
             emit(Resource.Success(response))
 
-            Log.d("WeatherRepository", "API Response Success: $response")
         } catch (e: Exception) {
             emit(Resource.Error(e.message ?: "Bilinmeyen bir hata oluştu"))
-
-            Log.e("WeatherRepository", "API Response Error: ${e.message}")
         }
     }
 }
Index: app/src/main/java/com/yeceylan/groupmaker/ui/components/PlayerGrid.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/yeceylan/groupmaker/ui/components/PlayerGrid.kt b/app/src/main/java/com/yeceylan/groupmaker/ui/components/SelectedPlayersGrid.kt
rename from app/src/main/java/com/yeceylan/groupmaker/ui/components/PlayerGrid.kt
rename to app/src/main/java/com/yeceylan/groupmaker/ui/components/SelectedPlayersGrid.kt
--- a/app/src/main/java/com/yeceylan/groupmaker/ui/components/PlayerGrid.kt	(revision dd83c786bb9715e15728f25b2a0af0c6dc6f6c44)
+++ b/app/src/main/java/com/yeceylan/groupmaker/ui/components/SelectedPlayersGrid.kt	(date 1723428063177)
@@ -25,7 +25,6 @@
 import com.yeceylan.groupmaker.R
 import com.yeceylan.groupmaker.domain.model.User
 
-
 @Composable
 fun SelectedPlayersGrid(selectedUsers: List<User>, setSelectedPersons: (List<User>) -> Unit) {
     if (selectedUsers.isNotEmpty()) {
@@ -76,7 +75,7 @@
                             }
                         }
                         Text(
-                            text = person.firstName,
+                            text = person.firstName.ifEmpty { person.userName },
                             modifier = Modifier
                                 .align(Alignment.CenterHorizontally)
                                 .padding(top = 4.dp)
Index: app/src/main/java/com/yeceylan/groupmaker/ui/match/matchinfo/MatchInfoViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yeceylan.groupmaker.ui.match.matchinfo\r\n\r\nimport android.content.ClipData\r\nimport android.content.ClipboardManager\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport android.os.DeadObjectException\r\nimport android.util.Log\r\nimport android.widget.Toast\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.yeceylan.groupmaker.domain.model.Match\r\nimport com.yeceylan.groupmaker.domain.use_cases.AddOldMatchUseCase\r\nimport com.yeceylan.groupmaker.domain.use_cases.GetActiveMatchUseCase\r\nimport com.yeceylan.groupmaker.domain.use_cases.UpdateMatchUseCase\r\nimport com.yeceylan.groupmaker.domain.use_cases.auth.GetCurrentUserUidUseCase\r\nimport dagger.hilt.android.lifecycle.HiltViewModel\r\nimport kotlinx.coroutines.launch\r\nimport javax.inject.Inject\r\n\r\n@HiltViewModel\r\nclass MatchInfoViewModel @Inject constructor(\r\n    private val addOldMatchUseCase: AddOldMatchUseCase,\r\n    private val getActiveMatchUseCase: GetActiveMatchUseCase,\r\n    private val updateMatchUseCase: UpdateMatchUseCase,\r\n    private val getCurrentUserUidUseCase: GetCurrentUserUidUseCase\r\n) : ViewModel() {\r\n\r\n    fun copyIbanToClipboard(context: Context, iban: String) {\r\n        val clipboardManager =\r\n            context.getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager\r\n        val clipData = ClipData.newPlainText(\"IBAN\", iban)\r\n        clipboardManager.setPrimaryClip(clipData)\r\n        Toast.makeText(context, \"IBAN kopyalandı\", Toast.LENGTH_SHORT).show()\r\n    }\r\n\r\n    fun openMapForDirections(context: Context, address: String) {\r\n        val gmmIntentUri = Uri.parse(\"google.navigation:q=${Uri.encode(address)}\")\r\n        val mapIntent = Intent(Intent.ACTION_VIEW, gmmIntentUri)\r\n        mapIntent.setPackage(\"com.google.android.apps.maps\")\r\n        if (mapIntent.resolveActivity(context.packageManager) != null) {\r\n            context.startActivity(mapIntent)\r\n        } else {\r\n            Toast.makeText(context, \"Harita uygulaması bulunamadı\", Toast.LENGTH_SHORT).show()\r\n        }\r\n    }\r\n\r\n    fun finishMatch() {\r\n        viewModelScope.launch {\r\n            try {\r\n                val userId = getCurrentUserUidUseCase()\r\n                val activeMatch = getActiveMatchUseCase(userId)\r\n\r\n                if (activeMatch != null) {\r\n                    val updatedMatch = activeMatch.copy(isActive = false)\r\n                    updateMatchUseCase(userId, updatedMatch)\r\n                    addOldMatchUseCase(updatedMatch)\r\n                }\r\n            } catch (e: Exception) {\r\n                Log.e(\"ViewModel\", \"Exception occurred\", e)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/yeceylan/groupmaker/ui/match/matchinfo/MatchInfoViewModel.kt b/app/src/main/java/com/yeceylan/groupmaker/ui/match/matchinfo/MatchInfoViewModel.kt
--- a/app/src/main/java/com/yeceylan/groupmaker/ui/match/matchinfo/MatchInfoViewModel.kt	(revision dd83c786bb9715e15728f25b2a0af0c6dc6f6c44)
+++ b/app/src/main/java/com/yeceylan/groupmaker/ui/match/matchinfo/MatchInfoViewModel.kt	(date 1723420202358)
@@ -10,13 +10,21 @@
 import android.widget.Toast
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.viewModelScope
+import com.yeceylan.groupmaker.R
+import com.yeceylan.groupmaker.core.Resource
 import com.yeceylan.groupmaker.domain.model.Match
+import com.yeceylan.groupmaker.domain.model.weather.Hour
+import com.yeceylan.groupmaker.domain.model.weather.WeatherResponse
+import com.yeceylan.groupmaker.domain.model.weather.WeatherType
 import com.yeceylan.groupmaker.domain.use_cases.AddOldMatchUseCase
 import com.yeceylan.groupmaker.domain.use_cases.GetActiveMatchUseCase
 import com.yeceylan.groupmaker.domain.use_cases.UpdateMatchUseCase
 import com.yeceylan.groupmaker.domain.use_cases.auth.GetCurrentUserUidUseCase
 import dagger.hilt.android.lifecycle.HiltViewModel
 import kotlinx.coroutines.launch
+import java.text.SimpleDateFormat
+import java.util.Calendar
+import java.util.Locale
 import javax.inject.Inject
 
 @HiltViewModel
@@ -46,6 +54,33 @@
         }
     }
 
+    fun processWeatherData(
+        weatherResource: Resource<WeatherResponse>?,
+        matchDate: String
+    ): Pair<Hour?, Int?>? {
+        if (weatherResource is Resource.Success) {
+            val weatherInfo = weatherResource.data
+            if (weatherInfo != null && weatherInfo.forecast.forecastday.isNotEmpty()) {
+                val forecastDay = weatherInfo.forecast.forecastday[0]
+
+                val inputDateFormat = SimpleDateFormat("dd-MM-yyyy", Locale.getDefault())
+                val dateParsed = inputDateFormat.parse(matchDate)
+                val currentDate = Calendar.getInstance().time
+                val diff = dateParsed.time - currentDate.time
+                val diffDays = diff / (1000 * 60 * 60 * 24)
+
+                if (forecastDay.hour.isNotEmpty() && diffDays <= 14) {
+                    val currentHourWeather = forecastDay.hour[0]
+                    val conditionText = currentHourWeather.condition.text
+                    val weatherIconResId =
+                        WeatherType.weatherIconMap[conditionText] ?: R.drawable.ic_star
+                    return Pair(currentHourWeather, weatherIconResId)
+                }
+            }
+        }
+        return null
+    }
+
     fun finishMatch() {
         viewModelScope.launch {
             try {
Index: app/src/main/java/com/yeceylan/groupmaker/ui/match/MakeMatchViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yeceylan.groupmaker.ui.match\r\n\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.viewModelScope\r\nimport androidx.navigation.NavController\r\nimport com.google.android.gms.maps.model.LatLng\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.gson.Gson\r\nimport com.yeceylan.groupmaker.core.Resource\r\nimport com.yeceylan.groupmaker.domain.model.Match\r\nimport com.yeceylan.groupmaker.domain.model.User\r\nimport com.yeceylan.groupmaker.domain.use_cases.GetActiveMatchUseCase\r\nimport com.yeceylan.groupmaker.domain.use_cases.UpdateMatchUseCase\r\nimport dagger.hilt.android.lifecycle.HiltViewModel\r\nimport kotlinx.coroutines.flow.MutableStateFlow\r\nimport kotlinx.coroutines.flow.StateFlow\r\nimport kotlinx.coroutines.launch\r\nimport java.net.URLEncoder\r\nimport java.nio.charset.StandardCharsets\r\nimport javax.inject.Inject\r\n\r\n@HiltViewModel\r\nclass MakeMatchViewModel @Inject constructor(\r\n    private val getActiveMatchUseCase: GetActiveMatchUseCase,\r\n    private val updateMatchUseCase: UpdateMatchUseCase,\r\n    private val firebaseAuth: FirebaseAuth\r\n) : ViewModel() {\r\n\r\n    private val _users = MutableStateFlow<Resource<List<User>>>(Resource.Loading())\r\n    val users: StateFlow<Resource<List<User>>> = _users\r\n\r\n    private val _activeMatch = MutableStateFlow<Match?>(null)\r\n    val activeMatch: StateFlow<Match?> = _activeMatch\r\n\r\n    private val _team1Name = MutableStateFlow(\"Takım 1\")\r\n    val team1Name: StateFlow<String> = _team1Name\r\n\r\n    private val _team2Name = MutableStateFlow(\"Takım 2\")\r\n    val team2Name: StateFlow<String> = _team2Name\r\n\r\n    private val _selectedPersons1 = MutableStateFlow<List<User>>(emptyList())\r\n    val selectedPersons1: StateFlow<List<User>> = _selectedPersons1\r\n\r\n    private val _selectedPersons2 = MutableStateFlow<List<User>>(emptyList())\r\n    val selectedPersons2: StateFlow<List<User>> = _selectedPersons2\r\n\r\n    private val _matchLocation = MutableStateFlow(\"\")\r\n    val matchLocation: StateFlow<String> = _matchLocation\r\n\r\n    private val _matchDate = MutableStateFlow(\"\")\r\n    val matchDate: StateFlow<String> = _matchDate\r\n\r\n    private val _matchTime = MutableStateFlow(\"\")\r\n    val matchTime: StateFlow<String> = _matchTime\r\n\r\n    private val _showPlayerCountDialog = MutableStateFlow(false)\r\n    val showPlayerCountDialog: StateFlow<Boolean> = _showPlayerCountDialog\r\n\r\n    private val _showChangeTeamNamesDialog = MutableStateFlow(false)\r\n    val showChangeTeamNamesDialog: StateFlow<Boolean> = _showChangeTeamNamesDialog\r\n\r\n    private val currentUserId = firebaseAuth.currentUser?.uid\r\n\r\n    init {\r\n        fetchActiveMatch()\r\n    }\r\n\r\n    private fun fetchActiveMatch() {\r\n        viewModelScope.launch {\r\n            val match = currentUserId?.let { getActiveMatchUseCase(it) }\r\n            _activeMatch.value = match\r\n            _users.value = match?.playerList?.let { Resource.Success(it) } ?: Resource.Success(emptyList())\r\n        }\r\n    }\r\n\r\n    fun updateMatch(updatedMatchData: Match) {\r\n        viewModelScope.launch {\r\n            currentUserId?.let { userId ->\r\n                val currentMatch = activeMatch.value\r\n                if (currentMatch != null) {\r\n                    val updatedMatch = currentMatch.copy(\r\n                        type = updatedMatchData.type,\r\n                        matchLocationTitle = updatedMatchData.matchLocationTitle,\r\n                        matchLocation = updatedMatchData.matchLocation,\r\n                        matchDate = updatedMatchData.matchDate,\r\n                        matchTime = updatedMatchData.matchTime,\r\n                        firstTeamName = updatedMatchData.firstTeamName,\r\n                        secondTeamName = updatedMatchData.secondTeamName,\r\n                        playerList = updatedMatchData.playerList,\r\n                        firstTeamPlayerList = updatedMatchData.firstTeamPlayerList,\r\n                        secondTeamPlayerList = updatedMatchData.secondTeamPlayerList,\r\n                        isActive = updatedMatchData.isActive\r\n                    )\r\n                    updateMatchUseCase(userId, updatedMatch)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun updateMatchAndNavigate(\r\n        navController: NavController,\r\n        locationLatLng: LatLng?,\r\n        selectedAddress: String\r\n    ) {\r\n        val updatedMatch = activeMatch.value?.copy(\r\n            matchLocationTitle = _matchLocation.value,\r\n            matchLocation = selectedAddress,\r\n            matchDate = _matchDate.value,\r\n            matchTime = _matchTime.value,\r\n            firstTeamName = _team1Name.value,\r\n            secondTeamName = _team2Name.value,\r\n            firstTeamPlayerList = _selectedPersons1.value,\r\n            secondTeamPlayerList = _selectedPersons2.value,\r\n            latLng = locationLatLng,\r\n            isActive = true\r\n        )\r\n\r\n        updatedMatch?.let {\r\n            updateMatch(it)\r\n\r\n            val matchInfoJson = Gson().toJson(it)\r\n            val encodedJson = URLEncoder.encode(\r\n                matchInfoJson,\r\n                StandardCharsets.UTF_8.toString()\r\n            ).replace(\"+\", \"%20\")\r\n            navController.navigate(\"matchInfo/$encodedJson\")\r\n        }\r\n    }\r\n\r\n    fun setTeam1Name(name: String) {\r\n        _team1Name.value = name\r\n    }\r\n\r\n    fun setTeam2Name(name: String) {\r\n        _team2Name.value = name\r\n    }\r\n\r\n    fun setMatchLocation(location: String) {\r\n        _matchLocation.value = location\r\n    }\r\n\r\n    fun setMatchDate(date: String) {\r\n        _matchDate.value = date\r\n    }\r\n\r\n    fun setMatchTime(time: String) {\r\n        _matchTime.value = time\r\n    }\r\n\r\n    fun togglePlayerCountDialog(show: Boolean) {\r\n        _showPlayerCountDialog.value = show\r\n    }\r\n\r\n    fun toggleChangeTeamNamesDialog(show: Boolean) {\r\n        _showChangeTeamNamesDialog.value = show\r\n    }\r\n\r\n    fun setSelectedPersons1(users: List<User>) {\r\n        _selectedPersons1.value = users\r\n    }\r\n\r\n    fun setSelectedPersons2(users: List<User>) {\r\n        _selectedPersons2.value = users\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/yeceylan/groupmaker/ui/match/MakeMatchViewModel.kt b/app/src/main/java/com/yeceylan/groupmaker/ui/match/MakeMatchViewModel.kt
--- a/app/src/main/java/com/yeceylan/groupmaker/ui/match/MakeMatchViewModel.kt	(revision dd83c786bb9715e15728f25b2a0af0c6dc6f6c44)
+++ b/app/src/main/java/com/yeceylan/groupmaker/ui/match/MakeMatchViewModel.kt	(date 1723422018675)
@@ -11,6 +11,7 @@
 import com.yeceylan.groupmaker.domain.model.User
 import com.yeceylan.groupmaker.domain.use_cases.GetActiveMatchUseCase
 import com.yeceylan.groupmaker.domain.use_cases.UpdateMatchUseCase
+import com.yeceylan.groupmaker.domain.use_cases.auth.GetCurrentUserUidUseCase
 import dagger.hilt.android.lifecycle.HiltViewModel
 import kotlinx.coroutines.flow.MutableStateFlow
 import kotlinx.coroutines.flow.StateFlow
@@ -23,7 +24,7 @@
 class MakeMatchViewModel @Inject constructor(
     private val getActiveMatchUseCase: GetActiveMatchUseCase,
     private val updateMatchUseCase: UpdateMatchUseCase,
-    private val firebaseAuth: FirebaseAuth
+    private val getCurrentUserUidUseCase: GetCurrentUserUidUseCase,
 ) : ViewModel() {
 
     private val _users = MutableStateFlow<Resource<List<User>>>(Resource.Loading())
@@ -59,23 +60,24 @@
     private val _showChangeTeamNamesDialog = MutableStateFlow(false)
     val showChangeTeamNamesDialog: StateFlow<Boolean> = _showChangeTeamNamesDialog
 
-    private val currentUserId = firebaseAuth.currentUser?.uid
-
     init {
         fetchActiveMatch()
     }
 
     private fun fetchActiveMatch() {
         viewModelScope.launch {
-            val match = currentUserId?.let { getActiveMatchUseCase(it) }
+            val currentUserId = getCurrentUserUidUseCase()
+            val match = getActiveMatchUseCase(currentUserId)
             _activeMatch.value = match
-            _users.value = match?.playerList?.let { Resource.Success(it) } ?: Resource.Success(emptyList())
+            _users.value =
+                match?.playerList?.let { Resource.Success(it) } ?: Resource.Success(emptyList())
         }
     }
 
-    fun updateMatch(updatedMatchData: Match) {
+    private fun updateMatch(updatedMatchData: Match) {
         viewModelScope.launch {
-            currentUserId?.let { userId ->
+            val currentUserId = getCurrentUserUidUseCase()
+            currentUserId.let { userId ->
                 val currentMatch = activeMatch.value
                 if (currentMatch != null) {
                     val updatedMatch = currentMatch.copy(
Index: .idea/deploymentTargetSelector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetSelector\">\r\n    <selectionStates>\r\n      <SelectionState runConfigName=\"app\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n        <DropdownSelection timestamp=\"2024-08-11T12:05:59.464314200Z\">\r\n          <Target type=\"DEFAULT_BOOT\">\r\n            <handle>\r\n              <DeviceId pluginId=\"LocalEmulator\" identifier=\"path=C:\\Users\\Ali\\.android\\avd\\Pixel_8_API_34.avd\" />\r\n            </handle>\r\n          </Target>\r\n        </DropdownSelection>\r\n        <DialogSelection>\r\n          <targets>\r\n            <Target type=\"DEFAULT_BOOT\">\r\n              <handle>\r\n                <DeviceId pluginId=\"LocalEmulator\" identifier=\"path=C:\\Users\\Ali\\.android\\avd\\Pixel_2_API_34.avd\" />\r\n              </handle>\r\n            </Target>\r\n            <Target type=\"DEFAULT_BOOT\">\r\n              <handle>\r\n                <DeviceId pluginId=\"LocalEmulator\" identifier=\"path=C:\\Users\\Ali\\.android\\avd\\Pixel_8_API_34.avd\" />\r\n              </handle>\r\n            </Target>\r\n          </targets>\r\n        </DialogSelection>\r\n      </SelectionState>\r\n    </selectionStates>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetSelector.xml b/.idea/deploymentTargetSelector.xml
--- a/.idea/deploymentTargetSelector.xml	(revision dd83c786bb9715e15728f25b2a0af0c6dc6f6c44)
+++ b/.idea/deploymentTargetSelector.xml	(date 1723430503822)
@@ -26,6 +26,9 @@
           </targets>
         </DialogSelection>
       </SelectionState>
+      <SelectionState runConfigName="WeatherInfoContentPreview">
+        <option name="selectionMode" value="DROPDOWN" />
+      </SelectionState>
     </selectionStates>
   </component>
 </project>
\ No newline at end of file
