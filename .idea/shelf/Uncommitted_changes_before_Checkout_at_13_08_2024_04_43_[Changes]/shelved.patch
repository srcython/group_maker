Index: app/src/main/java/com/yeceylan/groupmaker/ui/match/matchinfo/MatchInfoViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yeceylan.groupmaker.ui.match.matchinfo\r\n\r\nimport android.content.ClipData\r\nimport android.content.ClipboardManager\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport android.util.Log\r\nimport android.widget.Toast\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.yeceylan.groupmaker.R\r\nimport com.yeceylan.groupmaker.core.Resource\r\nimport com.yeceylan.groupmaker.domain.model.weather.Hour\r\nimport com.yeceylan.groupmaker.domain.model.weather.WeatherResponse\r\nimport com.yeceylan.groupmaker.domain.model.weather.WeatherType\r\nimport com.yeceylan.groupmaker.domain.use_cases.AddOldMatchUseCase\r\nimport com.yeceylan.groupmaker.domain.use_cases.GetActiveMatchUseCase\r\nimport com.yeceylan.groupmaker.domain.use_cases.UpdateMatchUseCase\r\nimport com.yeceylan.groupmaker.domain.use_cases.auth.GetCurrentUserUidUseCase\r\nimport dagger.hilt.android.lifecycle.HiltViewModel\r\nimport kotlinx.coroutines.launch\r\nimport java.text.SimpleDateFormat\r\nimport java.util.Calendar\r\nimport java.util.Locale\r\nimport javax.inject.Inject\r\n\r\n@HiltViewModel\r\nclass MatchInfoViewModel @Inject constructor(\r\n    private val addOldMatchUseCase: AddOldMatchUseCase,\r\n    private val getActiveMatchUseCase: GetActiveMatchUseCase,\r\n    private val updateMatchUseCase: UpdateMatchUseCase,\r\n    private val getCurrentUserUidUseCase: GetCurrentUserUidUseCase\r\n) : ViewModel() {\r\n\r\n    fun copyIbanToClipboard(context: Context, iban: String) {\r\n        val clipboardManager =\r\n            context.getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager\r\n        val clipData = ClipData.newPlainText(\"IBAN\", iban)\r\n        clipboardManager.setPrimaryClip(clipData)\r\n        Toast.makeText(context, \"IBAN kopyalandı\", Toast.LENGTH_SHORT).show()\r\n    }\r\n\r\n    fun openMapForDirections(context: Context, address: String) {\r\n        val gmmIntentUri = Uri.parse(\"google.navigation:q=${Uri.encode(address)}\")\r\n        val mapIntent = Intent(Intent.ACTION_VIEW, gmmIntentUri)\r\n        mapIntent.setPackage(\"com.google.android.apps.maps\")\r\n        if (mapIntent.resolveActivity(context.packageManager) != null) {\r\n            context.startActivity(mapIntent)\r\n        } else {\r\n            Toast.makeText(context, \"Harita uygulaması bulunamadı\", Toast.LENGTH_SHORT).show()\r\n        }\r\n    }\r\n\r\n    fun processWeatherData(\r\n        weatherResource: Resource<WeatherResponse>?,\r\n        matchDate: String\r\n    ): Pair<Hour?, Int?>? {\r\n        if (weatherResource is Resource.Success) {\r\n            val weatherInfo = weatherResource.data\r\n            if (weatherInfo != null && weatherInfo.forecast.forecastDay.isNotEmpty()) {\r\n                val forecastDay = weatherInfo.forecast.forecastDay[0]\r\n\r\n                val inputDateFormat = SimpleDateFormat(\"dd-MM-yyyy\", Locale.getDefault())\r\n                val dateParsed = inputDateFormat.parse(matchDate)\r\n                val currentDate = Calendar.getInstance().time\r\n                val diff = dateParsed.time - currentDate.time\r\n                val diffDays = diff / (1000 * 60 * 60 * 24)\r\n\r\n                if (forecastDay.hour.isNotEmpty() && diffDays <= 14) {\r\n                    val currentHourWeather = forecastDay.hour[0]\r\n                    val conditionText = currentHourWeather.condition.text\r\n                    val weatherIconResId =\r\n                        WeatherType.weatherIconMap[conditionText] ?: R.drawable.ic_star\r\n                    return Pair(currentHourWeather, weatherIconResId)\r\n                }\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n\r\n    fun finishMatch() {\r\n        viewModelScope.launch {\r\n            try {\r\n                val userId = getCurrentUserUidUseCase()\r\n                val activeMatch = getActiveMatchUseCase(userId)\r\n\r\n                if (activeMatch != null) {\r\n                    val updatedMatch = activeMatch.copy(isActive = false)\r\n                    updateMatchUseCase(\r\n                        userId,\r\n                        updatedMatch\r\n                    ) // This should now correctly update the match\r\n                    addOldMatchUseCase(updatedMatch)\r\n                }\r\n            } catch (e: Exception) {\r\n                Log.e(\"ViewModel\", \"Exception occurred\", e)\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/yeceylan/groupmaker/ui/match/matchinfo/MatchInfoViewModel.kt b/app/src/main/java/com/yeceylan/groupmaker/ui/match/matchinfo/MatchInfoViewModel.kt
--- a/app/src/main/java/com/yeceylan/groupmaker/ui/match/matchinfo/MatchInfoViewModel.kt	
+++ b/app/src/main/java/com/yeceylan/groupmaker/ui/match/matchinfo/MatchInfoViewModel.kt	
@@ -101,4 +101,3 @@
     }
 
 }
-
