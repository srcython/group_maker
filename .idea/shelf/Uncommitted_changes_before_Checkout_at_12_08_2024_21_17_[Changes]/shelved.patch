Index: app/src/main/java/com/yeceylan/groupmaker/data/repository/UserRepositoryImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.yeceylan.groupmaker.data.repository\r\n\r\nimport android.net.Uri\r\nimport android.util.Log\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\nimport com.google.firebase.firestore.ListenerRegistration\r\nimport com.google.firebase.firestore.toObject\r\nimport com.google.firebase.storage.FirebaseStorage\r\nimport com.yeceylan.groupmaker.core.Resource\r\nimport com.yeceylan.groupmaker.domain.model.Match\r\nimport com.yeceylan.groupmaker.domain.model.User\r\nimport com.yeceylan.groupmaker.domain.repository.UserRepository\r\nimport kotlinx.coroutines.channels.awaitClose\r\nimport kotlinx.coroutines.flow.Flow\r\nimport kotlinx.coroutines.flow.callbackFlow\r\nimport kotlinx.coroutines.tasks.await\r\nimport javax.inject.Inject\r\n\r\nclass UserRepositoryImpl @Inject constructor(\r\n    private val firestore: FirebaseFirestore,\r\n    private val storage: FirebaseStorage\r\n) : UserRepository {\r\n\r\n    override suspend fun addStorage(uri: Uri, userId: String) = callbackFlow {\r\n\r\n        val profileImageRef = storage.reference.child(\"users/${userId}.jpg\")\r\n        val listener = profileImageRef.putFile(uri).addOnSuccessListener {\r\n\r\n            profileImageRef.downloadUrl.addOnSuccessListener {\r\n\r\n                val response = if (it != null){\r\n                    Resource.Success(it.toString())\r\n                }else{\r\n                    Resource.Error(\"user repo imp addStorage resource failed\")\r\n                }\r\n                trySend(response)\r\n            }\r\n        }\r\n        awaitClose {\r\n            listener.cancel()\r\n        }\r\n    }\r\n\r\n    override suspend fun addUser(user: User) {\r\n        firestore.collection(\"users\")\r\n            .document(user.id)\r\n            .set(user)\r\n            .await()\r\n    }\r\n\r\n    override suspend fun getUser() = callbackFlow {\r\n        val snapshotListener = firestore.collection(\"users\")\r\n            .document(FirebaseAuth.getInstance().currentUser!!.uid)\r\n            .addSnapshotListener { snapshot, e ->\r\n\r\n                val userResponse = if (snapshot != null) {\r\n                    val user = snapshot.toObject<User>()!!\r\n                    Resource.Success(user)\r\n                } else {\r\n                    Resource.Error(e.toString())\r\n                }\r\n                trySend(userResponse)\r\n            }\r\n        awaitClose {\r\n            snapshotListener.remove()\r\n        }\r\n    }\r\n\r\n    override suspend fun getUsers(): Flow<Resource<List<User>>> = callbackFlow {\r\n        trySend(Resource.Loading())\r\n        val snapshotListener: ListenerRegistration = firestore.collection(\"users\")\r\n            .addSnapshotListener { snapshot, error ->\r\n\r\n                val usersResponse = if (snapshot != null) {\r\n                    val users = snapshot.toObjects(User::class.java)\r\n                    Resource.Success(users)\r\n                } else {\r\n                    Resource.Error(error?.message ?: \"Veri alınamadı\")\r\n                }\r\n                trySend(usersResponse)\r\n            }\r\n\r\n        awaitClose {\r\n            snapshotListener.remove()\r\n        }\r\n    }\r\n\r\n    override suspend fun updateMatch(userId: String, match: Match) {\r\n        val userDocument = firestore.collection(\"users\").document(userId)\r\n        val matchesCollection = userDocument.collection(\"matches\")\r\n\r\n        matchesCollection.document(match.id)\r\n            .update(\r\n                \"matchLocationTitle\", match.matchLocationTitle,\r\n                \"matchLocation\", match.matchLocation,\r\n                \"matchDate\", match.matchDate,\r\n                \"firstTeamName\", match.firstTeamName,\r\n                \"matchTime\", match.matchTime,\r\n                \"latLng\", match.latLng,\r\n                \"secondTeamName\", match.secondTeamName,\r\n                \"playerList\", match.playerList,\r\n                \"firstTeamPlayerList\", match.firstTeamPlayerList,\r\n                \"secondTeamPlayerList\", match.secondTeamPlayerList\r\n            )\r\n            .await()\r\n    }\r\n\r\n    override suspend fun addMatch(userId: String, match: Match) {\r\n        val userDocument = firestore.collection(\"users\").document(userId)\r\n        val matchesCollection = userDocument.collection(\"matches\")\r\n        matchesCollection.document(match.id)\r\n            .set(match)\r\n            .await()\r\n    }\r\n\r\n    override suspend fun getActiveMatch(userId: String): Match? {\r\n        val userDocument = firestore.collection(\"users\").document(userId)\r\n        Log.d(\"UserRepositoryImpl\", \"Fetching active match for user: $userId\")\r\n        return try {\r\n            // Log all matches for debugging\r\n            logMatches(userId)\r\n\r\n            val matchesSnapshot = userDocument.collection(\"matches\")\r\n                .whereEqualTo(\"active\", true)\r\n                .get()\r\n                .await()\r\n\r\n            Log.d(\"UserRepositoryImpl\", \"Matches snapshot size: ${matchesSnapshot.size()}\")\r\n\r\n            if (matchesSnapshot.documents.isNotEmpty()) {\r\n                val match = matchesSnapshot.documents.firstOrNull()?.toObject(Match::class.java)\r\n                Log.d(\"UserRepositoryImpl\", \"Active match found: $match\")\r\n                match\r\n            } else {\r\n                Log.d(\"UserRepositoryImpl\", \"No active match found for user $userId\")\r\n                null\r\n            }\r\n        } catch (e: Exception) {\r\n            Log.e(\r\n                \"UserRepositoryImpl\",\r\n                \"Error getting active match for user $userId: ${e.message}\",\r\n                e\r\n            )\r\n            null\r\n        }\r\n    }\r\n\r\n    private suspend fun logMatches(userId: String) {\r\n        val userDocument = firestore.collection(\"users\").document(userId)\r\n        val matchesSnapshot = userDocument.collection(\"matches\")\r\n            .get()\r\n            .await()\r\n\r\n        for (document in matchesSnapshot.documents) {\r\n            Log.d(\"UserRepositoryImpl\", \"Match Document: ${document.id}, Data: ${document.data}\")\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/yeceylan/groupmaker/data/repository/UserRepositoryImpl.kt b/app/src/main/java/com/yeceylan/groupmaker/data/repository/UserRepositoryImpl.kt
--- a/app/src/main/java/com/yeceylan/groupmaker/data/repository/UserRepositoryImpl.kt	(revision c00681a07e1dda4b4e46d8cc45b7afcb058fffcc)
+++ b/app/src/main/java/com/yeceylan/groupmaker/data/repository/UserRepositoryImpl.kt	(date 1723485884273)
@@ -99,6 +99,7 @@
                 "matchTime", match.matchTime,
                 "latLng", match.latLng,
                 "secondTeamName", match.secondTeamName,
+                "type", match.type,
                 "playerList", match.playerList,
                 "firstTeamPlayerList", match.firstTeamPlayerList,
                 "secondTeamPlayerList", match.secondTeamPlayerList
